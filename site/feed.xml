<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eric Miller's Website</title>
    <description>My personal website. A place for my stuff.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 14 Apr 2017 18:00:42 -0500</pubDate>
    <lastBuildDate>Fri, 14 Apr 2017 18:00:42 -0500</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>The Problem with File Systems</title>
        <description>&lt;p&gt;File systems are organized hierarchically. This makes sense, and is somewhat
intuitive to use. This is how your computer works. Everything is organized
relative to the “root directory” (/ on Mac/Linux/BSD, C:\ on Windows). Every
document, every executable, every system file is organized somewhere in that
hierarchy. It’s how personal computers have worked for almost as long as we’ve
had file systems on them. To those who are computer-savvy, or who grew up with
computers, this makes complete sense. Of course they’re hierarchical - you have
folders and subfolders to organize things, you have things separated by purpose,
it makes for a powerful organizational tool.&lt;/p&gt;

&lt;p&gt;But they’re the wrong way to do it. It makes sense for the engineers who built
the systems - it’s easy and straightforward. But this idea comes from when
computers were machines of science and war - not the personal computers we use
today. The truth is, this way of doing things simply doesn’t make sense anymore.&lt;/p&gt;

&lt;p&gt;I sense some of you are angry or confused with me. But hear me out.&lt;/p&gt;

&lt;p&gt;I’ll start off with showing why and how this way of organizing files has failed,
mostly with examples.&lt;/p&gt;

&lt;h1 id=&quot;more-information-about-the-topic&quot;&gt;More Information About the Topic&lt;/h1&gt;

&lt;p&gt;File systems are the building blocks of files. It keeps track of what space is
used and what isn’t, where files begin and end, and where everything is located.
The fundamental ideas of file systems are fairly common, and work similarly no
matter what operating system you’re on. Of course, there are lots of different
implementations of this functionality. If you’re on Windows, you use NTFS. If
you’re on a mac (or iOS device, for that matter), it runs on HFS+. If you’re on
Linux, you most likely use Ext3 or Ext4.&lt;/p&gt;

&lt;p&gt;For the record, NTFS and HFS+ are both outdated and lag behind their Linux
counterparts. Apple is supposed to release a new file system this year, called
APFS, that has some neat features, but in many ways it still falls short of the
counterparts offered for Linux.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;need&lt;/em&gt; a file system, at least under the hood. Without it, you have no idea
which physical parts of your hard drive are used and which ones aren’t. You
don’t know when a file was last edited, how big it is, or where it is. It’s
impossible to use a computer without one. But does it need to be exposed to the
user? Maybe, but probably not as much as it is.&lt;/p&gt;

&lt;p&gt;Also keep in mind that a lot of what I talk about here is already how iOS and
Android work, at least to some extent, and I took a lot of inspiration from
both their successes and shortcomings. While their methods still fall short of
where they could be, I still believe that they’re a good milestone.&lt;/p&gt;

&lt;p&gt;Finally, I’ll explain in simple terms what a database is. This is kind of
tricky. Basically, it’s just a way of storing a lot of data, and keeping track
of the relationships between data. For example, if we want to keep track of a
list of houses, who lives in those houses, and what their names are, a database
could do that. The easiest way to think about it is that a database is Basically
a big Excel spreadsheet. You can put a ton of data in it. For each bit of
information, you have a column (Address, Name, phone number in our example
above). Each row is another entry, with another person. We can also filter or
sort our entries by any of the columns too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-04-14/spreadsheet.jpg&quot; alt=&quot;Example&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;example-1-the-desktop&quot;&gt;Example 1. The Desktop&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-04-14/cluttered-desktop.png&quot; alt=&quot;*cringe*&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We all know someone whose desktop looks like this. Hell, I’d barely blame you -
the hierarchical structure of the file system basically encourages it. One of
the basic principles of engineering a good user experience is this: &lt;em&gt;minimize the
number of clicks for a user to do what they want to do&lt;/em&gt;. Saving files to the
desktop is the easiest way to do this. Want to open that
word document you were working on? There it is. Don’t have to open up a file
explorer, or remember where you saved it - it’s right there.&lt;/p&gt;

&lt;p&gt;But I have a lot to say, so I’ll keep this brief. The point of a hierarchical
file system is, supposedly, to keep things organized. This is the opposite of
that. And why does this flourish? Because the file system encourages people to
do this. It encourages people to be disorganized, in favor of convenience.&lt;/p&gt;

&lt;h2 id=&quot;example-2-alfred-and-quicksilver&quot;&gt;Example 2. Alfred and QuickSilver&lt;/h2&gt;

&lt;p&gt;Alfred and QuickSilver are mac apps, that allow you an easy to search your files
and do some basic things. They were around before Apple revamped Spotlight to
serve the same purpose. QuickSilver has been around for over 6 years, and it and
Alfred were wildly popular in some circles, because of how much easier they made
things. They solved the same problem that putting everything on the desktop
solved - making files and applications easy to find and open.&lt;/p&gt;

&lt;p&gt;Here’s how these work: Press cmd-space (or on Windows, the Windows-key) and
start typing. Once you type enough of the app or file name, it pops up in
search, and you hit enter. Bam, you opened a file with 0 clicks and a few
keystrokes.&lt;/p&gt;

&lt;p&gt;This makes it easier to stay organized, because opening a file is easy,
regardless of how deep in the file system it is. But it’s another symptom of
the problem - the fact that it was needed in the first place indicates a
problem.&lt;/p&gt;

&lt;h2 id=&quot;example-3-because-i-always-follow-the-rule-of-three&quot;&gt;Example 3. Because I Always Follow the Rule of Three&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(writing)&quot;&gt;Seriously, it’s built into me. I have to.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this, you’ll need to understand what a
&lt;a href=&quot;https://kb.iu.edu/d/abbe&quot;&gt;symbolic link&lt;/a&gt; is. It’s basically a more powerful
version of Windows shortcuts or Mac aliases, that works particularly well for
folders. Basically, you tell the computer “Okay, when I say Documents/photos,
just redirect me to my Photos folder”.&lt;/p&gt;

&lt;p&gt;For this example, I’ll talk about how I organize my files.
I’m obsessive with my file organization. I’ve
got subfolder after subfolder, everything carefully named, everything in its
proper place. No clutter. Basically the opposite of my home office. Then, I’ve
got dozens of symlinks pointing to related
folders (for example, my senior
design code belongs both in the “MSOE” folder and the “Code” folder) so that
everything is accessible from anywhere that makes sense. Then dozens more,
carefully thought out, to offer good convenience while still minimizing clutter.
Basically, I try hard to keep a clean and functional file system.&lt;/p&gt;

&lt;p&gt;So let’s take just my Documents folder as an example. I have 0 files there, but
19 folders. 4 of those folders are hidden, because apps put stuff there and I
couldn’t get rid of it. Another 4 of the folders are symbolic links, because
either the OS does something that I have to work around, or it’s deeper in my
file tree and I want shortcuts. One of those folders is google drive. For each
subfolder in google drive, I have a symlink somewhere else pointing to it so I
can make it accessible from a logical place. Some software wants to put folders
in Documents, when it doesn’t belong there, so I make a workaround. Sometimes
compatibility makes things act weird ways (like Google Drive) so I symlink my
way around it. My point is, in order to organize my files logically,
hierarchically, and accessibly, I need to use special commands and knowledge
that the average user just doesn’t have. All to make the file system work
nicely.&lt;/p&gt;

&lt;p&gt;That is not the hallmark of a good system.&lt;/p&gt;

&lt;p&gt;I believe that my way of organizing my file system among the most elegant, and
one of the best I’ve seen. I’m really quite proud of it, but even then, I still
feel it’s often quite ugly and hacky due to its constraints.&lt;/p&gt;

&lt;h1 id=&quot;technical-reasons&quot;&gt;Technical Reasons&lt;/h1&gt;
&lt;p&gt;There are also technical reasons why this method of document management is
flawed. The most obvious is viruses. Say you download some
&lt;a href=&quot;https://en.wikipedia.org/wiki/Ransomware&quot;&gt;RansomWare&lt;/a&gt;. It starts encrypting
all your documents, and BAM! you’ve lost everything. This only works because
since the process is running in your name, the file system lets it access all
of your files, without asking any questions. Say the RansomWare was disguised as
a game - does it make sense for a game to open word documents? Absolutely not.
But in the file system, they’re not distinguished in any way, so it can do it.
That’s why you don’t really get RansomWare on iOS and Android devices - if they
want to access your word documents, or your photos, or anything, they have to
ask you for permission. Mobile devices already implement what I’m talking about
here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-04-14/ransomware.png&quot; alt=&quot;What RansomWare looks like&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So while we’re talking about mobile devices, let’s bring up another point.
On your phone, where are your photos located? Easy, in the Photos app. On your
computer, where are your photos located? Probably all sorts of different places.
In my opinion, this is why tablets and especially iOS devices are easier for the
less tech-savvy crowd. Things aren’t organized hierarchically, but by
application. Want to open a word document? Open word. A photo? Open Photos. A
photoshop file? Open photoshop. The entire hierarchy is abstracted away from the
user. It’s been &lt;em&gt;proven&lt;/em&gt; that this is the safer and more intuitive way to do
things.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstraction_(software_engineering)&quot;&gt;Wikipedia&lt;/a&gt;:
&lt;em&gt;“In software engineering and computer science, abstraction is a technique for arranging complexity of computer systems. It works by establishing a level of complexity on which a person interacts with the system, suppressing the more complex details below the current level.”&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-the-hierarchy-still-makes-sense&quot;&gt;Why the Hierarchy Still Makes Sense&lt;/h1&gt;

&lt;p&gt;Don’t get me wrong, I don’t want to do away with it entirely. It makes sense
for computers to be organized this way, and they have been for a long time.
Computer scientists have figured out how to organize and work with it. The
world’s servers are built on it, and it works great for that. It’s absolutely
ideal for storing operating systems. My argument is only that, for users, the
file system is an awful way to store documents and things.&lt;/p&gt;

&lt;p&gt;On Linux and BSD systems, things are really cleanly organized in this hierarchy.
&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; is for binaries, &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; is where users’ home folders are, &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt; is
where settings live, and so on. This makes sense, for the purpose it serves,
and is actually a rather elegant solution. Again, my beef is with users’
documents.&lt;/p&gt;

&lt;h1 id=&quot;okay-smart-guy-if-the-old-way-is-wrong-what-should-we-do&quot;&gt;Okay, Smart Guy, if the Old Way is Wrong, What Should we Do?&lt;/h1&gt;

&lt;p&gt;Thanks for asking. I’ll admit, this is a really hard problem, for various
reasons. The most obvious is backwards-compatibility. File shares also pose a
bit of a problem, but perhaps they can stay the way they are. There’s a
multitude of things that would make compatibility here difficult, but this post
is long as is.I’m just going to look at how I’d go about solving it on a single
personal computer.&lt;/p&gt;

&lt;p&gt;I’ll also say that people smarter than I have tried and failed to do this.
Notably, the engineers at Apple attempted to do this with iCloud. It failed
to catch on, and just doesn’t work very well in my opinion.&lt;/p&gt;

&lt;p&gt;Here’s the problem with how Apple has been approaching these problems: They
don’t want to fundamentally change the way they do things, they just want to
sloppily tack new ideas onto the older software. The best example of this is
their (soon to be obsoleted) file system,
&lt;a href=&quot;https://en.wikipedia.org/wiki/HFS_Plus&quot;&gt;HFS+&lt;/a&gt;. HFS+ is the successor to HFS,
and was basically just Apple tacking on some newer features to HFS through
ugly workarounds. It’s somewhat infamous. When they tried to organize by app
through their iCloud platform, they did something similar.&lt;/p&gt;

&lt;p&gt;If we want to make a good solution to this, we need to be original. We need to
be creative. We need to have some &lt;em&gt;courage&lt;/em&gt;. While we work with half-measures
and cop-outs to complete solutions, the system we create will be found wanting.&lt;/p&gt;

&lt;p&gt;Personally, I think the correct answer to this is a database. We could build
the database on top of the file system (this would actually make sense) but it
would need to be ubiquitous. Why? This would allow extremely efficient searches
of documents or apps by any criteria. Current file systems actually do something
similar, but I want to take it to the next level.&lt;/p&gt;

&lt;p&gt;Some of you may be wondering how I’d deal with projects. For example, in code,
you have a whole folder full of files and assets, with lots of file types. I
have some ideas about how to address this, namely by sandboxing the files in
a single “project” file that’s actually a folder (kind of like
&lt;a href=&quot;https://superuser.com/questions/78176/how-do-mac-app-execution-files-work?rq=1&quot;&gt;how Apple handles .apps&lt;/a&gt;),
but I won’t get into it here.&lt;/p&gt;

&lt;p&gt;Next, we need a document manager. Actually, this would be pretty easy to write,
even just on top of the file system. With the database, this would be incredibly
powerful. If the operating system integrated it, it would be, in my opinion, the
single best file manager in existence.&lt;/p&gt;

&lt;p&gt;So let me walk you through how this would work. You open up the manager, and
have a prompt in front of you. You type “Word”, and it shows you a list of all
of your Microsoft Word files, organized by the last time you edited them. You’re
looking for one about a short story, so you type “story”. Seven files pop up,
and you press enter to open the one at the top. You don’t know what folder it’s
in. You don’t care. But it’s easy to find, and it’s somewhere that makes sense.&lt;/p&gt;

&lt;h1 id=&quot;lets-get-technical&quot;&gt;Let’s get Technical&lt;/h1&gt;

&lt;p&gt;If you’re non-technical, you can skip this section. If you want to try anyway,
you’re welcome to, but may find yourself needing to look a lot up.&lt;/p&gt;

&lt;p&gt;Let’s say our database is relational, and built on top of the file system. This
is basically how the indexing in file systems already works, but we can do
better.&lt;/p&gt;

&lt;p&gt;Each file has its own entry in the table. It has a path (this would have to be
updated when the file is moved, but that’s pretty doable, at least in MacOS).
The file has a path, an extension (.png), a file type (picture). Each file type
has certain apps that are allowed to read and write it. For example, a picture
would be readable by photo managers, office software, and loads of other stuff,
and would be writable by things like photo managers and image editors. Only apps
that are registered as a type’s reader (and approved by the user) are allowed to
read that kind of file, and the same thing for writing. If a RansomWare app
wants to encrypt all your documents, it’s gonna have to ask you first. Ideally
apps have modular permissions (like how on iOS for any given app you can limit
what device features it can access).&lt;/p&gt;

&lt;p&gt;So there’s file-path is 1-1, file extension is many-1, file-type may be
many-many (extensions may be registered to multiple apps. Stupid, but it
happens). type-readapps is many-many, and type-writeapps is many-many. If you
understand relational databases, this should make sense.&lt;/p&gt;

&lt;p&gt;Obligatory “non-relational databases would be stupid for this” note: First, we
know the exact structure of every table (aside from path size), and it’s very
predictable. Even if we
flesh it out and have a lot of tables, it’ll still be very simple. Second, this
would be running on a single machine, there’s no reason for partition tolerance.
Third, consistency and availability are both important here. Fourth, SQL is more
mature and reliable. Fifth, a well-tuned SQL system will be much more quick and
efficient. Sixth, stop trying to cop out of SQL just because it takes a bit more
forethought.&lt;/p&gt;

&lt;p&gt;The files are indexed by every major field one would search on. Name, create
date, mod date, add date, read date, name, extension, file type, etc. I’d need
to do a lot of analysis to figure out what compound indexes we’d want, but you
get the idea (I hope).&lt;/p&gt;

&lt;p&gt;The database, when presented with a document name, simply searches the
files, which are of course, indexed by name. Easy and fast. Document type? Join
the files with their types and filter on that. Extension? Even easier. App?
Join app, read list, file type, and file, filtered by app. Easy.&lt;/p&gt;

&lt;p&gt;We could even have our own “folder” system, based around tags. Tag it with
“school” to go in the school folder. This also bypasses the problem of
hierarchical file systems not being able to share a document between folders.&lt;/p&gt;

&lt;h1 id=&quot;some-credit-to-mobile-operating-systems&quot;&gt;Some Credit to Mobile Operating Systems&lt;/h1&gt;

&lt;p&gt;Mobile operating systems had an opportunity to try doing things a new way,
because they didn’t have to follow these aging paradigms. And I’ll give credit
to them for trying something new, and something different. It’s still a young
method to managing files, but I believe it’s maturing, and I believe that it
more or less holds the keys to the future.&lt;/p&gt;

&lt;h1 id=&quot;closing&quot;&gt;Closing&lt;/h1&gt;

&lt;p&gt;Now, I’m no user experience expert. But the traditional way is outdated, and
worse, promotes bad practices. It’s time to rethink how we do things in an age
where computers are consumer products, and not arcane machines operated by
specialists. With the rise of touchscreen devices, we’re seeing lots of new
ideas in this area, and I hope in the near future we’ll move on to a better
system. Maybe you disagree with me. Actually, that’s pretty likely. But consider
what I’ve said here, and keep an open mind. No system is perfect, but the simple
fact is that the file system is from an age before the personal computer, and,
in my opinion, we’re trying to put round pegs in square holes here.&lt;/p&gt;

&lt;p&gt;Computer science has sped along at lightspeed over the last few decades. One
of the downsides of that is that we’ve wound up with a lot of weird ways of
doing things just because of backwards compatibility. As our field grows
further, we need to find new and more efficient ways of doing things, and to
fix our mistakes, as difficult as that may be.&lt;/p&gt;

&lt;p&gt;Maybe you disagree with me on this point, and you may even be correct. But the
above is what’s more important. We need fresh ideas, and open minds, about how
to do things both old and new. The software engineering field is less than
100 years old (C is only 45 years old), and in a field this young, “it’s always
been this way” just isn’t a good excuse.&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Apr 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/technology/2017/04/14/Filesystems-Suck.html</link>
        <guid isPermaLink="true">http://localhost:4000/technology/2017/04/14/Filesystems-Suck.html</guid>
        
        
        <category>Technology</category>
        
      </item>
    
      <item>
        <title>Today's Computers are Black Magic</title>
        <description>&lt;p&gt;Today’s computers are insanely fast and sophisticated. We don’t necessarily think of them that way, because
they do such simple things like browse the web, read emails, and run dishwashers. Almost everything that
uses electricity these days has a computer in it. We’re really seeing this with things like home automation,
where even individual lightbulbs have small computers in them. They’re insanely cheap too, going to as &lt;a href=&quot;https://www.raspberrypi.org/blog/raspberry-pi-zero/&quot;&gt;little
as $5&lt;/a&gt; for something that can run a full operating
system.&lt;/p&gt;

&lt;p&gt;It’s easy to take this for granted, especially if you’re too young (as I am) to even remember the days
of programming computers with punch cards. So I’m going to put some things into perspective.&lt;/p&gt;

&lt;p&gt;Let’s take a trip back just 70 years, to the year 1947. Hitler was defeated just a short time ago, the
USSR was budding into a global superpower, and computers were finally coming into their own. The prize
American computer of the time was the &lt;a href=&quot;https://en.wikipedia.org/wiki/ENIAC&quot;&gt;ENIAC&lt;/a&gt;. It was paid for by the
U.S. military (computers were originally machines of war), and came in costing $500,000. Of course, 
adjusted for inflation, this is somewhere between 6-7 million dollars.&lt;/p&gt;

&lt;p&gt;It was a beast. The best of its kind. It was the machine with which the military assessed damage and
calculated the impact of atomic bombs. It was the machine that opened the door for computers to be used,
not just by the military, but by business. It was the machine that &lt;em&gt;proved what computers were capable of&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Imagine the smartest person you can think of. Maybe it’s Einstein, maybe it’s Turing, or maybe it’s a name
lost to time. Now imagine that all of their genius was focused on one thing: crunching numbers. Now imagine
that they don’t need to eat or sleep, and just crunch numbers 24/7. Say they could perform 5 calculations
every second (adding, subtracting, etc… huge numbers, like 31242363.21894), including writing them down.
The ENIAC was like 100 of those people, all working in perfect unison.&lt;/p&gt;

&lt;p&gt;In computer science, we have a term for this. It’s called 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Floating-point_arithmetic&quot;&gt;floating point&lt;/a&gt; operations per second 
&lt;a href=&quot;https://en.wikipedia.org/wiki/FLOPS&quot;&gt;(FLOPS)&lt;/a&gt;. In my example above, each genius was capable of 5 FLOPS.
The ENIAC was capable of 500. So when I say that the ENIAC was powerful, and peerless, that’s where I’m
coming from. The ENIAC dwarfed any one of these geniuses by a huge margin, and far surpassed the 
capabilities of any human that ever existed, or any machine that preceded it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;There’s a small computer you can buy called the 
&lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot;&gt;Raspberry Pi 3&lt;/a&gt;. It costs just $35. That’s
about 0.0005% of the adjusted price of the ENIAC. It’s capable of about 24 &lt;em&gt;billion&lt;/em&gt; FLOPS. For those
keeping score at home, that’s 48 million times faster than the ENIAC. For $35.&lt;/p&gt;

&lt;p&gt;A 48,000,000x improvement. Over just 70 years. That kind of rapid improvement has never been matched in
any other endeavor.&lt;/p&gt;

&lt;p&gt;Now, in the words of the immortal BILLY MAYS: &lt;strong&gt;&lt;em&gt;“BUT WAIT! THERE’S MORE!”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So lets take it a step further, with just a few more numbers (I know, I’m a nerd, but this is just too 
impressive for me to pass up). How much computing power could we buy for the price of the ENIAC? The Pi 3
is 48 million times faster, and costs a fraction of the price. Ignoring the fact that you can buy computing
power by the hour for &lt;em&gt;much&lt;/em&gt; cheaper than buying a Pi, let’s say for the sake of this example that we
stockpile as many Pis as we can and see how much they can compute. At the price of $35/Pi, assuming the
ENIAC cost $7M, we can buy 200,000 Raspberry Pis. That’s 96 &lt;strong&gt;trillion&lt;/strong&gt; times the power of the ENIAC.
That’s right, for the same price (adjusted for inflation), we have 96 trillion times the computing power.&lt;/p&gt;

&lt;p&gt;70 years.&lt;/p&gt;

&lt;p&gt;My phone is more powerful than a Pi 3. My laptop is. Your computer is too. This is what we use to check
our email. To look at pictures of cats. Hell, to write a weird nerdy post about how powerful computers
have gotten.&lt;/p&gt;

&lt;p&gt;Computers have become so powerful, we take them for granted. They’re just a part of our daily lives, and
we come into contact with computers (in cars, dishwashers, thermostats…) without even thinking about it.
They’ve elevated to heights no one could’ve predicted, or even wrapped their head around less than a
century ago.&lt;/p&gt;

&lt;p&gt;That’s why we call this the information age. What would’ve been worth more than the entire Earth’s gross
product a century ago now sits in all of our pockets. Information is cheap, it’s abundant, and it’s in
everyone’s hands.&lt;/p&gt;

&lt;div class=&quot;col-md-4&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-04-08/BillyMays.jpg&quot; class=&quot;img-rounded col-md-4&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;col-md-4&quot;&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 08 Apr 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/technology/2017/04/08/Computers-Are-Black-Magic.html</link>
        <guid isPermaLink="true">http://localhost:4000/technology/2017/04/08/Computers-Are-Black-Magic.html</guid>
        
        
        <category>Technology</category>
        
      </item>
    
      <item>
        <title>On Internet Privacy - 31 March 2017</title>
        <description>&lt;h1 id=&quot;prologue&quot;&gt;Prologue&lt;/h1&gt;
&lt;p&gt;I don’t like to post or write about politics. I’m much more interested in education and exploration of
the kinds of topics I cover, and carefree writing. That said, I also feel that I can’t ignore it when the
world of politics steps into the world of computer science; I would be doing a disservice to this website,
to my (small) readership, and to myself if I ignore it and don’t speak up and voice my opinion.&lt;/p&gt;

&lt;p&gt;If you’re an employer or potential employer, have a personal relationship with me, or are sensitive about
these politics, you may want to skip this post unless you can’t divorce your personal opinions on politics 
from the technical insight and the opinions I state here.&lt;/p&gt;

&lt;h1 id=&quot;the-situation&quot;&gt;The Situation&lt;/h1&gt;

&lt;p&gt;As you may be aware, there is pending legislation surrounding individuals’ privacy as it pertains to 
internet service providers. The legislation will most likely be enacted into law at this point, and while
it’s certainly possible that it won’t pass, it most likely will. Even if it doesn’t, it will almost
definitely come up again.&lt;/p&gt;

&lt;p&gt;So what is this legislation? It’s essentially just rolling back some interpretations of the law that were
held during the previous presidency. These interpretations put some restrictions on what your ISP can do
with the information collected on you. The collection of this information is natural, in the same way that
it’s natural that your doctor keeps your medical records. The question addressed by this legislation is
what your ISP can do with that information. Naturally, it’s nowhere near as sensitive as medical records,
and there’s no real substantial regulation or definite guidelines surrounding what can be done with this
information, in large part due to how young the internet is. In particular, this legislation aims to void
the interpretations of existing law (originally intended for &lt;em&gt;phone&lt;/em&gt; communications) and to loosen up the
restrictions TeleCom companies face regarding what they can do with their data.&lt;/p&gt;

&lt;p&gt;Currently, your ISP can use your data for some things, ranging from improving your service (some do this
more than others… &lt;em&gt;Comcast&lt;/em&gt;.) to personalizing ads. Yes, like Facebook and Google do. Personally, I
don’t have an enormous issue with this in pure principle, because Facebook and Google already do this, 
and at this point companies using your data to personalize advertisements and to sell to advertisers is 
a given. The &lt;strong&gt;big issue&lt;/strong&gt; that comes from this is that your ISP has records of &lt;em&gt;every&lt;/em&gt; website you visit,
every server you connect to, and can even tell when you’re compulsively reading Cracked article after
Cracked article at 3AM because you had too much coffee and now you can’t sleep. Now, they can’t
necessarily see &lt;em&gt;what&lt;/em&gt; you’re reading, just who you’re reading it from (if you’re not using encryption,
i.e. HTTPS, they can absolutely see it). But that can still tell you a lot, and frankly we don’t really
know what will happen once ISPs are given this much free reign with personal data. What we do know is
that it will lead to repositories of data - linked to people, locations, addresses, and computers - the
likes of which has never been seen before. Predictably, privacy advocates see this as a bad thing&lt;/p&gt;

&lt;h2 id=&quot;the-sides&quot;&gt;The Sides&lt;/h2&gt;
&lt;p&gt;There are, essentially, two sides in this debate. The first is the more powerful, the TeleCom companies.
The second is privacy advocates.&lt;/p&gt;

&lt;p&gt;TeleCom companies, of course, want to maximize their profit. The existing regulations are, supposedly (I
am not disputing this here, I am not a lawyer), complex and difficult to understand. This is likely true,
and if it is, merits change. They also restrict what these companies can do with this information. They,
no doubt, will sell it (primarily to advertisers) for additional profit. In theory this will be passed on
to consumers in the form of savings on service.&lt;/p&gt;

&lt;p&gt;Privacy advocates, on the other hand, take a somewhat draconian stance in the opposite directions. Most
would probably like for all consumers’ data to be fully private. Similarly to doctor-patient
confidentiality, your ISP would only be able to use your information internally, and then only with
people and processes that require it to provide better service to you. They would like similar 
restrictions on sites like Facebook and Google, but honestly, that will never happen. In those cases,
they’re more likely to advocate for ensuring that there’s as little information linking consumers and
their data when their data is sold.&lt;/p&gt;

&lt;p&gt;Many computer scientists are privacy advocates. That said, many also believe that big data collection and
analysis is the way of the future, and that the privacy enjoyed in the last century is an antiquated idea.
I sit somewhere in the middle, but I tend to agree with privacy advocates in most cases. But I also use
Google and Facebook heavily, so I’m a hypocrite. Most of us are, at one level or another; protecting your
privacy is getting harder and harder.&lt;/p&gt;

&lt;h2 id=&quot;some-quick-economics&quot;&gt;Some Quick Economics&lt;/h2&gt;
&lt;p&gt;An &lt;em&gt;externality&lt;/em&gt; is the cost or benefit of a business or product that does not affect the owner. For
example, a negative externality of a paper manufacturing plant is the drop in nearby property prices
nearby due to the smell. This doesn’t affect the plant, but other people pay the price. There are two
types of protections against negative externalities. The first is the free market. If a company is
damaging the environment, you can vote with your wallet by taking your business elsewhere until they
change their behavior. The second is government regulation. The government can step in, enacting laws
and fines to encourage businesses to contain their negative effects.&lt;/p&gt;

&lt;p&gt;Conservatives will argue that the first is the superior approach, and liberals will argue that the second
is the correct approach. But whichever side you fall on, it’s hard to dispute that the first doesn’t
apply in the situation if the driving force, competition, is not present. As it applies here, most people
can’t or won’t very well go without internet service. In this case, depending on where you live, internet
service will be at best an oligopoly, but most likely a monopoly. &lt;strong&gt;Most places in the country are
serviced by a single ISP, and almost all have 3 or less.&lt;/strong&gt; That’s not competition. To make this point,
I’ve prepared 3 maps, powered by &lt;a href=&quot;https://www.broadbandmap.gov&quot;&gt;BroadbandMap.gov&lt;/a&gt;. For this reason,
government regulation is the only even mildly effective tool we have at controlling the externalities
of the TeleCom industry. If you have evidence otherwise, feel free to contact me with the link above.&lt;/p&gt;

&lt;h3 id=&quot;1-isp&quot;&gt;1 ISP&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-31/1-provider.jpg&quot; alt=&quot;Only 1 Provider&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-or-more-isps&quot;&gt;2 or more ISPs&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-31/2-or-more-providers.jpg&quot; alt=&quot;2-13 Providers&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-or-more-isps&quot;&gt;4 or more ISPs&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-31/4-or-more-providers.jpg&quot; alt=&quot;4-13 Providers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, there’s very little competition in broadband providers, and in most of the country, there
is none. I think I’ve adequately made that point. As such, the free market cannot be counted on to provide
sufficient alternatives when these companies decide to take certain actions.&lt;/p&gt;

&lt;h1 id=&quot;what-do-i-do&quot;&gt;What do I do?&lt;/h1&gt;
&lt;p&gt;You may not care about your privacy - but many do. If you don’t, I encourage you to still consider
advocating against this type of legislation, as those who do want to be protected should be. I’d encourage
the reader to take action by donating to the &lt;a href=&quot;https://www.eff.org/&quot;&gt;Electronic Frontier Foundation&lt;/a&gt;, a 
non-profit organization that aims to protect your rights in the Information Age.&lt;/p&gt;

&lt;h2 id=&quot;1-vpn&quot;&gt;1. VPN&lt;/h2&gt;

&lt;p&gt;Now, once these are enacted, if you want to protect yourself, I’ll offer a few methods to do that. The
first, and easiest (though not free) is to research and pay for a VPN service. This routes all your
internet traffic through a third-party, where the price of membership includes the price of privacy. For
more technical users, it may also be possible to host this yourself, using Amazon Web Services or another
cloud computing provider - but I don’t know how cost-effective or how difficult this would be.&lt;/p&gt;

&lt;h1 id=&quot;2-tor&quot;&gt;2. Tor&lt;/h1&gt;
&lt;p&gt;Tor is a browser dedicated to anonymous browsing and evasion of censorship. Basically, using it lets you 
get around any sort of censorship (I used it for this in my MPS days), is free, and can also be used to 
access the “dark web” (though aside from being academically interesting, I don’t have much use for or
recommend using). It is free.&lt;/p&gt;

&lt;p&gt;It’s not perfect security-wise (if you remember a few years back, the drug marketplace The Silk Road was 
busted) and while it’s far from perfect, unless you’re a drug kingpin, figuring out who you are is a LOT 
of work for not much reward, and realistically, no one will bother.&lt;/p&gt;

&lt;p&gt;Finally, I’ll cover some history of the Tor network. I know, it’s boring, but it can be important to 
understand the context of a tool this important. It was created as an independent non-profit, with the
main goals being internet privacy and censorship avoidance, especially for people living under oppressive
government regimes. It took off after it was funded by various third parties, including the U.S.
government and google. That said, it has maintained its independence and integrity.&lt;/p&gt;

&lt;p&gt;There are various ways to use Tor. The easiest is the &lt;a href=&quot;https://www.torproject.org/projects/torbrowser.html&quot;&gt;Tor Browser&lt;/a&gt;, which is an internet browser that
routes all of its traffic through the Tor network. For those more technically inclined, Tor can also be
run through a socket on your computer, and route all of your traffic through a SOCKS proxy.&lt;/p&gt;

&lt;h1 id=&quot;concluding&quot;&gt;Concluding&lt;/h1&gt;
&lt;p&gt;I hope you’ve found this article interesting and/or useful, and found my conjecture to be reasonable. If
you have any vitriol to direct at me, I invite you to visit the &lt;a href=&quot;/dev/null/&quot;&gt;Complaints Department&lt;/a&gt;.
If you enjoyed the article, please share with your friends and family so we can have a better informed
world.&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/privacy/2017/03/31/Internet-Privacy.html</link>
        <guid isPermaLink="true">http://localhost:4000/privacy/2017/03/31/Internet-Privacy.html</guid>
        
        <category>politics</category>
        
        
        <category>Privacy</category>
        
      </item>
    
      <item>
        <title>On the AES Encryption Algorithm</title>
        <description>&lt;p&gt;I wrote this paper for my Information Security class. Original publish date: 20 December 2016&lt;/p&gt;

&lt;p&gt;The Advanced Encryption Standard, or AES, is a symmetric algorithm released by the United States National Instritute of Standards and Technology (NIST). It is technically specified in FIPS-197. It is another name for the Rijndael algorithm, though they are distinct; the Rijndael is its own algorithm, but it was selected by the NIST for the AES standard. It can use multiple lengths of key, including 128- 192- and 256-bit keys. It encrypts data in 128-bit blocks. The 128-bit block size allows for easy integration with most file systems (which tend to use block sizes of 512 bits and larger) much easier and more efficient.&lt;/p&gt;

&lt;p&gt;AES was developed by the United States government for the purpose of protecting sensitive government documents, but the mathematical concepts and definitions were made available for private sector implementations. Aside from being used for the purpose of protecting federal classified information, it’s become, to a large extent, a global standard for symmetric encryption. In the public sector, AES is approved by the United States (notably the National Security Agency, also known as the NSA) for classified documents up to Top Secret classification.&lt;/p&gt;

&lt;p&gt;The development of AES, and the ultimate selection of the Rijndael algorithm, while done by the NIST, was a largely open process. It was open to public comment and scrutiny through every step of the process. The transparency and depth of this process, in addition to its wholehearted adoption by the US government itself, established a high level of confidence in the standard. This was, to a large extent, what fed its popularity and growth in the private sector.&lt;/p&gt;

&lt;p&gt;Being a symmetric key, is frequently used for local protection of data, and protection of data that needs to be accessible using a shared secret. This makes it a popular technology for local disk encryption, such as encrypted documents and even full disk encryption. It’s also often used for home wi-fi routers, to make new connections easy. Despite that, perhaps the most important and ubiquitous use of AES is for fast, secure transmission, such as over TLS (though an asymmetric algorithm is used to share the key).&lt;/p&gt;

&lt;p&gt;As with any cryptographic algorithm or service, it’s important to analyze potential vulnerabilities and ultimately, the resources necessary to bypass it. From a mathematical standpoint, AES has proven to be a robust standard. Of course, the nature of software and computer science are fundamentally different. Over the years, various exploits and vulnerabilities have been found, but none that seriously called into question or impacted the overall security of the standard. While the mathematics have shown to be sound (although there may be mathematical vulnerabilities, there is no known way to “break” the algorithm), implementations and even more, users, can be vulnerable. Ignoring the dangers of social engineering, flaws in the implementation of the open AES standard could be vulnerable. Given that, at some point in the implementation, all of the data can be siphoned, the algorithm can be trusted only as much as the author. This is best indicated by the story of LavaBit, an encryption service that was federally mandated to install an exploit in their service, along with a gag order.&lt;/p&gt;

&lt;p&gt;Sources:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.schneier.com/blog/archives/2012/03/can_the_nsa_bre.html&quot;&gt;http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.schneier.com/blog/archives/2012/03/can_the_nsa_bre.html&quot;&gt;http://csrc.nist.gov/archive/aes/index2.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.schneier.com/blog/archives/2012/03/can_the_nsa_bre.html&quot;&gt;http://www.jscape.com/blog/aes-encryption&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.schneier.com/blog/archives/2012/03/can_the_nsa_bre.html&quot;&gt;https://www.schneier.com/blog/archives/2012/03/can_the_nsa_bre.html&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 29 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/security/2017/03/29/AES-Security-Paper.html</link>
        <guid isPermaLink="true">http://localhost:4000/security/2017/03/29/AES-Security-Paper.html</guid>
        
        
        <category>Security</category>
        
      </item>
    
      <item>
        <title>How to Make a Basic rc.d Script in FreeBSD</title>
        <description>&lt;p&gt;Recently, I wanted to make an rc.d script for my FreeBSD server, in order to include TeamCity in the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt; interface, which in FreeBSD is linked to the rc.d system, as opposed to Linux’s systemd system.
I was unable to find an easy tutorial, until I stumbled upon a Minecraft forum where I found information on
a suitable script. The rc.d system is actually rather nice to work with, and in my opinion, confers more
power to the user than does systemd. This is largely thanks to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/rc.conf&lt;/code&gt; file. That said, writing
an rc.d script is relatively easy once you understand how to do it.&lt;/p&gt;

&lt;p&gt;The first step is to set up the script that tells &lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt; how to understand what to do. 
For the purpose of this tutorial, I’ll call the service &lt;code class=&quot;highlighter-rouge&quot;&gt;myservice&lt;/code&gt;. The first thing
to do is put a script in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/rc.d/&lt;/code&gt; folder. Name this file the name of your service, in
this case &lt;code class=&quot;highlighter-rouge&quot;&gt;myservice&lt;/code&gt;. This means the absolute path of this file is &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/rc.d/myservice&lt;/code&gt;.
Finally, make this file executable using &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x /usr/local/etc/rc.d/myservice&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, edit the file. The first step is the hashbang, which should be put on the first line. This lets the 
program know how to start the script independently. Your file should look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, we need to tell it how to use the rc subrouting. This is basically just boilerplate; add 
&lt;code class=&quot;highlighter-rouge&quot;&gt;. /etc/rc.subr&lt;/code&gt; to the file. Your file will now look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

. /etc/rc.subr
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, it’s time to put in some metadata so that rc.d understands some basic information about this service.
Again, this is, to some extent, boilerplate to work with the rc.d system.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name=&quot;myservice&quot; # How the service will be invoked from service
rcvar=&quot;${name}_enable&quot; # The variable in rc.conf that will allow this service to run
load_rc_config $name # Loads the config file, if relevant.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Okay, this script is set up to work with the rc.d system. Now, we need to tell it what to do. The first
thing is to set up any environment variables your service may need. You may or may not need to do this,
depending on the nature of your service. Let’s say &lt;code class=&quot;highlighter-rouge&quot;&gt;myservice&lt;/code&gt; needs Java to run, so we need to add the
&lt;code class=&quot;highlighter-rouge&quot;&gt;JRE_HOME&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export JRE_HOME=&quot;/usr/local&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Excellent! Now it’s time to tell service what to do when it uses particular commands. In this example, I’ll
say we’re using 3 commands: start, stop, and status. To do this, we set up a variable for each command,
where the value is the &lt;code class=&quot;highlighter-rouge&quot;&gt;sh&lt;/code&gt; code to run. For complicated setups, you’re best off setting this up to be an
independent file, or initializing these values as functions rather than variables. For the sake of
simplicity in the example, I’m going to use quick &lt;code class=&quot;highlighter-rouge&quot;&gt;sh&lt;/code&gt; one-liners. For reference, the variable names we use
are &lt;code class=&quot;highlighter-rouge&quot;&gt;start_cmd&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stop_cmd&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;status_cmd&lt;/code&gt;. Also note, in this example I’m assuming that &lt;code class=&quot;highlighter-rouge&quot;&gt;myservice&lt;/code&gt;
starts as a daemon, and stores its PID in a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;myservice.pid&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pidfile=&quot;/home/ericmiller/myservice/myservice.pid&quot;
start_cmd=&quot;/home/ericmiller/myservice/start ; echo MyService is now running on PID $(cat $pidfile)&quot;
stop_cmd=&quot;/home/ericmiller/myservice/stop ; echo MyService is not running. ; rm $(cat $pidfile)&quot;
status_cmd=&quot;if [ -e $pidfile ]; then echo MyService is running on PID $(cat $pidfile). ; return 1; fi; echo MyService is not running. ; return 0&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Okay, we’re almost done. Now we just need to tell rc.d to run the appropriate command based on the user’s
input. This is done with the following line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;run_rc_command &quot;$1&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Okay! That’s all you need for the script. Here’s what our &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/rc.d/myservice&lt;/code&gt; script looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

. /etc/rc.subr

&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myservice&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# How the service will be invoked from service&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;rcvar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_enable&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# The variable in rc.conf that will allow this service to run&lt;/span&gt;
load_rc_config &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Loads the config file, if relevant.&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JRE_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;pidfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/ericmiller/myservice/myservice.pid&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;start_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/ericmiller/myservice/start ; echo MyService is now running on PID &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cat &lt;span class=&quot;nv&quot;&gt;$pidfile&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;stop_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/ericmiller/myservice/stop ; echo MyService is not running. ; rm &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cat &lt;span class=&quot;nv&quot;&gt;$pidfile&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;status_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;if [ -e &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pidfile&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ]; then echo MyService is running on PID &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cat &lt;span class=&quot;nv&quot;&gt;$pidfile&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;. ; return 1; fi; echo MyService is not running. ; return 0&quot;&lt;/span&gt;

run_rc_command &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, there’s one last step. If you try to run the service with &lt;code class=&quot;highlighter-rouge&quot;&gt;service start myservice&lt;/code&gt;, it’ll give you
a message telling you that you need to enable it in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/rc.conf&lt;/code&gt;. You can do this with one simple command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo myservice_enable=&quot;YES&quot; &amp;gt;&amp;gt; /etc/rc.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Congrats! Your rc.d script is set up and ready to go.&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/tutorial/2017/03/28/FreeBSD-rcd-Setup.html</link>
        <guid isPermaLink="true">http://localhost:4000/tutorial/2017/03/28/FreeBSD-rcd-Setup.html</guid>
        
        <category>FreeBSD</category>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>March 21 2017 Apple Press Release Coverage</title>
        <description>&lt;p&gt;Apple put out a press release on Monday, announcing a few minor new products. I’m here to cover what they did, and what
I think of it. I’ll also say that I’m aggregating a lot from &lt;a href=&quot;https://macrumors.com&quot;&gt;MacRumors&lt;/a&gt;, which is a website
with Apple news and, in my opinion, is the fairest and has the highest journalistic integrity of the mainstream Apple
news aggregators.&lt;/p&gt;

&lt;h1 id=&quot;1-now-lower-end-ipad&quot;&gt;1. Now Lower-End iPad&lt;/h1&gt;
&lt;p&gt;Apple released a new lower-end iPad. It’s replacing the iPad Air 2, which has become a bit outdated. Most notably, in my
opinion, its price point has dropped from $399 to $329, making it Apple’s cheapest tablet offering. It’s got a few minor
technical updates. It’s running the new(er) A9 chip, which is a substantial improvement from the previous A8X. However,
it’s notable that it’s not using the A9X chips the iPad Pros use, and this is probably one of the main reasons for the
price drop. It’s also got a brighter display, and is about an ounce heavier (32 grams). If you want an iPad, now is a
good time to buy, thanks to the price drop.&lt;/p&gt;

&lt;h1 id=&quot;2-product-red-iphone-7&quot;&gt;2. (PRODUCT) RED iPhone 7&lt;/h1&gt;
&lt;p&gt;The iPhone now comes in a bright red. Some of the proceeds from this product goes to an organization that fights to
prevent and spread awareness about AIDS in some African countries. If you’re considering buying an iPhone 7, consider
buying this color to support a charity.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-23/red-iphone.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-clips-app&quot;&gt;3. Clips App&lt;/h1&gt;
&lt;p&gt;Apple is releasing a new app that allows users to make and edit videos, to easily and quickly make smooth, good-looking
videos straight from your phone. This app looks pretty cool, and I’m really looking forward to playing with it once it’s
released if it’s free.&lt;/p&gt;

&lt;h1 id=&quot;4-apple-watch-bands&quot;&gt;4. Apple Watch Bands&lt;/h1&gt;
&lt;p&gt;I don’t really care about these, but since it was part of the press release, I’ll mention it. Apple released a few new
ones, as they do seasonally. I like the look of some of them, but will not be buying any.&lt;/p&gt;

&lt;h1 id=&quot;in-closing&quot;&gt;In Closing&lt;/h1&gt;
&lt;p&gt;This was kind of a simple, quick press release by Apple for a few minor things. However, they’re expected to hold an
event in April to announce new iPad Pros, which will be interesting.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/apple/2017/03/23/Apple-Press-Release-Coverage.html</link>
        <guid isPermaLink="true">http://localhost:4000/apple/2017/03/23/Apple-Press-Release-Coverage.html</guid>
        
        
        <category>Apple</category>
        
      </item>
    
      <item>
        <title>Automatically Adding Screenshots to Photos in MacOS</title>
        <description>&lt;p&gt;I take a lot of screenshots. I use them for my website, for memory, for laughs, and a lot more. However,
I also take lots of screenshots on my phone. So it winds up being really weird (and inconvenient) when the
screenshots on my computer and the screenshots on my phone are organized differently and in completely
different places.&lt;/p&gt;

&lt;p&gt;So naturally, being the procrastinating programmer I am, I engineered a solution to consolidate everything
in one nice, organized package. Basically, I set up a simple app/script that anytime I take a screenshot
on my computer, it gets added to Photos.app, and shared in a simple, clean way across my devices. To
enable iCloud Photo Sync across your devices, open System Preferences and navigate to the iCloud
preference pane. Check the checkbox next to “Photos”. That’s it!&lt;/p&gt;

&lt;p&gt;I’ll tell you know, this can get a bit technical, but don’t worry. I’ll be here, going step by step, and
the entire process is perfectly safe.&lt;/p&gt;

&lt;h2 id=&quot;outcome&quot;&gt;Outcome&lt;/h2&gt;
&lt;p&gt;Whenever you take a screenshot with your Mac, it will be uploaded to Apple Photos in a folder called 
“MacOS Screenshots”, and shared across devices (if iCloud sync is enabled).&lt;/p&gt;

&lt;h2 id=&quot;caveats&quot;&gt;Caveats&lt;/h2&gt;
&lt;p&gt;When I set this up, I initially tried to unify my iOS screenshots and my MacOS screenshots into a single
folder. Unfortunately this isn’t quite easily possible (that I know of) without jailbreaking.&lt;/p&gt;

&lt;h1 id=&quot;how-to-take-screenshots&quot;&gt;How to Take Screenshots&lt;/h1&gt;
&lt;p&gt;MacOS has some pretty useful, and pretty powerful, screenshotting tools. There are three important ones,
which all have slightly different effects.&lt;/p&gt;

&lt;h2 id=&quot;1-full-screen&quot;&gt;1. Full Screen&lt;/h2&gt;
&lt;p&gt;This mode takes a screenshot of your entire screen. Everything is visible. This is quick and easy, but if
you’re sharing screenshots publicly, it may give out more information than you want. To take this kind of
screenshot, the shortcut is &lt;em&gt;cmd-shift-3&lt;/em&gt;. Following is what the result will look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-full-screen.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-grabbing&quot;&gt;2. Grabbing&lt;/h2&gt;
&lt;p&gt;This mode allows you to specify (“Grab”) a portion of your screen and save that. This lets you choose a 
more manageable chunk of your screen to use as a screenshot, rather than the whole thing. The shortcut is
&lt;em&gt;cmd-shift-4&lt;/em&gt;. Once this is done, your cursor will turn into a crosshair. Click and drag over the area you
want to screenshot. Here’s what that could look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-grabber.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-window-screenshots&quot;&gt;3. Window Screenshots&lt;/h2&gt;
&lt;p&gt;This mode takes a screenshot of just one application window. This is nice, and it’s what I usually use in
my posts and tutorials. To use it, you first enter the Grabbing shortcut, &lt;em&gt;cmd-shift-4&lt;/em&gt;. Then, press space.
Your cursor will turn into a picture of a camera. Then, just click on the window you want to screenshot. 
Another nice side effect of this kind of screenshot is that, unlike the other two, it ignores any
transparency effects, so it looks very clean. Here’s an example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-app-screenshot.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-1-isolating-screenshots&quot;&gt;Step 1. Isolating Screenshots&lt;/h1&gt;
&lt;p&gt;Historically, I’ve always set my computer to save screenshots to a special screenshots folder. I recommend
doing this here too, because it simplifies things and minimizes any potential weird side effects by
ensuring a sanitary working space. To do this, I recommend creating a folder in the Pictures folder (this
can be found in your home directory) called “Screenshots”. Mine looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-screenshots-folder.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first step here is to download &lt;a href=&quot;http://www.titanium.free.fr/onyx.html&quot;&gt;OnyX&lt;/a&gt;. This can be done without
OnyX, but this is the easiest way to do it. When you first open OnyX, it will give you some instructions
that will allow it to function properly. Follow these closely and carefully. OnyX is a safe tool, but also
a very powerful one. This means if it doesn’t have the resources it needs, it may not be able to do things
correctly. &lt;strong&gt;NOTE: When you launch OnyX, it will &lt;em&gt;temporarily&lt;/em&gt; lock up your computer. This is normal,
just wait for it to finish. It could take as long as a few minutes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, click on the “Parameters” tab. This tab can do lots of fun things, and you can feel free to explore
these on your own. However, we will now navigate to the “General” subtab as shown. Next, click the “select”
button next to the “path” field as shown. Now, in the popup window, select the Screenshots folder you just
created. **NOTE: I have a slightly different configuration, for personal backwards compatibilty reasons,
so my path is different. Yours should look something like: &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/yourusername/Pictures/Screenshots&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now take a screenshot; instead of showing up on the desktop, it should appear in your screenshots folder.
Now you have a dedicated screenshots folder where everything can go! We’re halfway there.&lt;/p&gt;

&lt;h1 id=&quot;step-2-preparing-photosapp&quot;&gt;Step 2. Preparing Photos.app&lt;/h1&gt;
&lt;p&gt;Now, we have to do some work with Photos.app to make sure our step 3 works right. This is pretty easy.
First, open Photos. In the top toolbar, there should be a large “plus” button. Click it, then in the menu
it opens, select “Album”. You can name this album whatever you want, but you’ll need to remember it for
step 3. I recommend something like “Screenshots: MacOS”.&lt;/p&gt;

&lt;p&gt;Once this album is created, it should be empty - this is ok.&lt;/p&gt;

&lt;h1 id=&quot;step-3-the-folder-action&quot;&gt;Step 3. The “Folder Action”&lt;/h1&gt;
&lt;p&gt;Brace yourself, this is probably the most complicated part.&lt;/p&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;/Applications/Automator&lt;/code&gt;. Select “New Document”. It will give you a series of choices for the type
of document to create, as seen below. Select “Folder Action”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-automator-document-type.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the top right-hand corner, there’s a drop-down menu that says “Choose folder.” Click this, select
“Other”, and then choose the Screenshots folder we created in step 1.&lt;/p&gt;

&lt;p&gt;In the search bar on the upper left-hand side (Says “Name” in gray), type “Import”. A few options will
show up just below it - click and drag the file to the right-hand side, so your screen looks like mine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-automator-1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, in the drop-down menu that says “Import without adding to album”, select “Add to existing top-level
album”. A new field will show up just to the right of that - select the screenshots album you created in
step 2. Mine looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-automator-2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, press &lt;em&gt;cmd-s&lt;/em&gt; to save. Name the file something recognizable, like “Screenshots - Import to Photos”.&lt;/p&gt;

&lt;p&gt;Go back to your screenshots folder that you made in step 1. Right click the folder, and select 
Services &amp;gt; Folder Actions, as shown below. Finder will offer a bunch of suggestions - press cancel. Make
sure that the “Enable Folder Actions” checkbox is checked, just like in my screenshot. Make sure that the
folder and script are both checked as well, just like in mine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-Folder-Actions-Finder.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-folder-actions-window.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;congrats&quot;&gt;Congrats!&lt;/h1&gt;
&lt;p&gt;Now, whenever you take screenshots on your mac, they will be added to Photos and uploaded to iCloud (if
enabled.)&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/tutorial/2017/03/19/MacOS-Screenshots-AddToPhotos.html</link>
        <guid isPermaLink="true">http://localhost:4000/tutorial/2017/03/19/MacOS-Screenshots-AddToPhotos.html</guid>
        
        <category>Apple</category>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>Apple, Muster your Courage. It's time for USB-C.</title>
        <description>&lt;p&gt;Apple, I’ve watched your progress over the last few years with interest. As a fan, follower, and analyst, I
feel I need to call you out on it when you’re making a mistake.&lt;/p&gt;

&lt;p&gt;And you’re making a mistake.&lt;/p&gt;

&lt;p&gt;USB-C is the future. You know this. It’s why your new laptops have solely USB-C (and despite what the haters
say, that’s a good thing). So it’s time to muster your famous &lt;em&gt;courage&lt;/em&gt;, and follow through on that.&lt;/p&gt;

&lt;p&gt;USB-C is the new standard. It may take some time to adopt, but it is. With up to 40Gbps throughput with the
thunderbolt standard, it’s the fastest mainstream port out there. It supports every kind of device people
use, from mice and keyboards, to headphones, to ethernet connections, and even to 4K displays. It even has
enough power throughput to power a laptop; that’s why you’re supporting power delivery from that port for 
the upcoming iPhones. And even through all of that, it’s relatively tiny (which I know you folks love).&lt;/p&gt;

&lt;p&gt;And I understand your hesitance, and your pain. The last time you changed the port on your iOS devices,
you faced enormous pushback. It’s not fun, and not good for a company in your position. But if you have the
courage to remove the aux jack from your iPhones, you have the courage to do this. And it’s worth doing. So
in the article that follows, I’ll lay out why this is a good idea, and why the pain of making the switch
is well worth it.&lt;/p&gt;

&lt;h1 id=&quot;1-user-experience&quot;&gt;1. User Experience&lt;/h1&gt;
&lt;p&gt;If there’s one thing Apple is famous for, it’s user experience. And not only user experience, but user
experience across devices. If I connect to WiFi on my mac, my phone will connect to it too. I can send
files back and forth with AirDrop easily. Hell, y’all have been pushing this more and more, with other
technologies like HandOff, Apple Watch unlock, and universal clipboard. And not to blow smoke, but you’ve
done a great job with it.&lt;/p&gt;

&lt;p&gt;But that’s software. When it comes to hardware, you’re sending mixed messages. If I buy a pair of lightning
headphones for my iPhone 7, I can’t then use them with my mac. If I buy a USB-C charging cable for one of
the new macs, I can’t then also use that to charge my phone. Imagine a world where, if I buy an accessory,
it works on every device I own. In terms of user experience, that’s something no one’s achieved yet. But
you can bet that’s where Android and Windows are going. If you don’t join them, Android and Windows will
start to blow you out of the water in terms of hardware compatibility. And I know that’s something you
don’t want.&lt;/p&gt;

&lt;p&gt;USB-C is an answer to the &lt;a href=&quot;https://xkcd.com/927/&quot;&gt;age-old problem of competing ports&lt;/a&gt;. You can either jump
into this new world with both feet, or you can be left in the dust by people who do.&lt;/p&gt;

&lt;h1 id=&quot;2-the-ipad-pro-line&quot;&gt;2. The iPad Pro Line&lt;/h1&gt;
&lt;p&gt;The iPad pro line is being marketed as a desktop replacement. In truth, you’re closer to that than your
competitors would like to admit, and further from it than you’d like to think.&lt;/p&gt;

&lt;p&gt;The simple fact is, as much as you believe that wireless is the future (as do I), the world still runs on
ports. You know this - it’s why you’re still putting ports on your laptops. One day, when wireless
charging from across the house works, the 802.11X WiFi standard has evolved, and Bluetooth reaches its true
potential, we’ll live in the world you dream about: a world without ports. But we’re not there. We’re not
even close.&lt;/p&gt;

&lt;p&gt;People - both professionals and consumers - need these ports. We need them to facilitate our presentations,
to print our documents, to share files, and to connect to secured networks. It may not be your ideal, but
it’s the world we live in. And you can’t truly call the iPad a “pro” until it can do these things.&lt;/p&gt;

&lt;p&gt;So even throwing away the ideas of “iOSX”, I believe that the iPad pro has the potential to be a truly
exceptional desktop replacement, even competing on an even playing field with something as fully-featured
as the Microsoft Surface Pro, likely even surpassing it.&lt;/p&gt;

&lt;p&gt;So let’s take a moment, and talk about three hypothetical graphic designers: Tom, Dick, and Sally. Tom uses
a fancy, new, top-of-the-line iPad Pro. Dick uses a generic laptop, let’s say a MacBook Pro. Sally uses a
Surface Pro.&lt;/p&gt;

&lt;p&gt;Tom and Sally, being the savvy purchasers they are, love their ability to draw right on their computers.
They have a clear advantage here over Dick, who needs a separate Wacom tablet. They also love the 
portability of their computers, so they can go meet with clients with just a small bag. Dick is frustrated
with his setup compared to his peers in this regard.&lt;/p&gt;

&lt;p&gt;Then, they have to get to work doing more sophisticated work. Tom and Sally use multiple monitors and an
ethernet hardline. Dick has an easy time of this, and Sally has the ports she needs to get it done. Tom, 
however, can’t do these tasks at all. The iPad doesn’t support that kind of multiple display setup at all,
and can’t do an ethernet hardline either. This means he can’t do anywhere near what his peers can, or work
as efficiently. Dick and Sally laugh at him for his purchase, and rightly so.&lt;/p&gt;

&lt;p&gt;And finally, they need to give a presentation. Tom brings his laptop, connects to the projector or 
big-screen display with no problem, and seamlessly gives his presentation. Sally can too, equally quickly.
Tom, however, is left in the dark. He has to send the presentation to a peer, and run it off their laptop.
How embarrassing.&lt;/p&gt;

&lt;p&gt;Now, do you see what I mean? The iPad pro is so close to being a feasible laptop replacement in terms of
software, but just doesn’t have the hardware to cut it. If it USB-C, and full software support for it, he
could easily keep up with Dick and Sally. His iPad would do everything he needs, and do it well. There is
so much potential for the iPad here, and it’s squandered just by this one simple shortcoming. It would make
your claims of it being a full-fledged desktop replacement a reality.&lt;/p&gt;

&lt;h1 id=&quot;3-lightning-licensing&quot;&gt;3. Lightning Licensing&lt;/h1&gt;
&lt;p&gt;I know, this would mean you lose out on licensing lightning products, and the income that comes with them.
I can’t claim to know how much profit you get from this, and I can only assume that both the loss of 
revenue and the corporate restructuring involved would be painful.&lt;/p&gt;

&lt;p&gt;But think about the points I just made. I believe there are a lot of people out there who would love to use
an iPad as a laptop replacement, but just can’t make the jump due to the shortcomings. Likewise, there’s no
doubt that the user experience improvements would improve your customer retention, and probably bring in
new users too. Not just that, but getting users into your ecosystem (and having your ecosystem become more
consistent/reliable) will encourage them to buy your other products, resulting in a multiplier effect.&lt;/p&gt;

&lt;p&gt;Further, think about the problems you’ve had with licensing. It discourages manufacturers from making 
accessories for your devices, and lowers their ROI. You need these people, and if you open up your
ecosystem to people to make more, and better, devices for your ecosystem, it’ll only spur your growth. And
that’s what’ll make you a successful company, not nickel-and-diming the manufacturers who build 
accessories to make your ecosystem richer.&lt;/p&gt;

&lt;p&gt;And of course, we all know you’ve had problems with counterfeiters. When some company cranks out subpar
devices and starts a house fire, you have to acknowledge that without the licensing issues, it would at
the very least be a &lt;em&gt;smaller&lt;/em&gt; issue. And given that if it wouldn’t be such a big problem if not for your
licensing practices, you are at least a little at fault for these incidents, for fostering an environment
where they’re &lt;del&gt;allowed&lt;/del&gt; encouraged to exist. If you really care about these problems, and about your
users, it would be ethical to cease this practice.&lt;/p&gt;

&lt;h1 id=&quot;in-closing&quot;&gt;In Closing&lt;/h1&gt;
&lt;p&gt;Adopting USB-C would be painful. But it’s not only the right thing to do, it’s in your best interest, from
almost every angle. While you’ll probably never read this, I can only hope that you’re still considering
the points I’ve made here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fscl01.fonpit.de/userfiles/4376948/image/AndroidPIT-usb-c-lighning-comparison-3.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sincerely, your pal and fan,&lt;/p&gt;

&lt;p&gt;Eric&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/apple/2017/03/16/iPad-USB-C.html</link>
        <guid isPermaLink="true">http://localhost:4000/apple/2017/03/16/iPad-USB-C.html</guid>
        
        
        <category>Apple</category>
        
      </item>
    
      <item>
        <title>Setting up Simple Continuous Integration for iOS Development</title>
        <description>&lt;p&gt;Setting up reliable continuous integration (CI) for XCode can be a nightmare. I personally wrestled with the
problem for a long while, eventually finding a somewhat convoluted workaround to make it work. However, I’ve
since found a way to develop and maintain a reliable CI solution. Following is how you can whip together something
similar.&lt;/p&gt;

&lt;p&gt;In this guide, you’ll find a start-to-finish CI solution for an XCode project.&lt;/p&gt;

&lt;h1 id=&quot;vocabulary&quot;&gt;Vocabulary&lt;/h1&gt;
&lt;p&gt;If you’re familiar with CI, you can probably skip this (short) section.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Version Control System (VCS): The system used for tracking changes and version control. In this example,
it is git/BitBucket.&lt;/li&gt;
  &lt;li&gt;CI Server: The server that monitors the VCS and tells build agents when and what to run.&lt;/li&gt;
  &lt;li&gt;Build Agent: The computer that runs builds and tests, at the behest of the CI server.&lt;/li&gt;
  &lt;li&gt;Package Manager: From &lt;a href=&quot;https://en.wikipedia.org/wiki/Package_manager&quot;&gt;Wikipedia&lt;/a&gt;: “A package manager or package management system is a collection of 
software tools that automates the process of installing, upgrading, configuring, and removing computer 
programs for a computer’s operating system in a consistent manner.” This means when you add new third-party
libraries, no additional work is necessary to make them work on the server.&lt;/li&gt;
  &lt;li&gt;Dependency Resolution: This is a technology that provides a way to programmatically install,
manage, and update third-party libraries.&lt;/li&gt;
  &lt;li&gt;GUID/UUID: Globally Unique IDentifier, or Universally Unique IDentifier. These two terms are
interchangeable. It is a 128-bit number that, when generated, is guaranteed to always be unique. It is
usually in hexadecimal, with a few dashes in between. If you want to know more, here’s the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier&quot;&gt;Wikipedia Article&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-youll-need&quot;&gt;What You’ll Need&lt;/h1&gt;
&lt;p&gt;Unfortunately, this process requires some resources that are not insubstantial. They are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A server to host your CI. This can be run on most operating systems, including MacOS, Windows, most Linux
distros, and even BSD. The server in my example is a dedicated computer running FreeBSD 11.0. Ideally, this
machine will have a high uptime, so a personal laptop is not ideal.&lt;/li&gt;
  &lt;li&gt;A build agent. This machine must run the most recent version of MacOS. A high uptime is ideal, but not
necessary for a small operation, like mine. I use a dedicated 2011 MacBook Pro using 
&lt;a href=&quot;https://integralpro.github.io/nosleep/&quot;&gt;NoSleep&lt;/a&gt;. This keeps the machine from going to sleep when closing
the lid. &lt;strong&gt;This can be the same machine as the CI server if desired&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;XCode must be installed on the build agent, along with all of the command line tools. It can
be installed from the &lt;a href=&quot;https://itunes.apple.com/us/app/xcode/id497799835?mt=12&quot;&gt;Mac App Store&lt;/a&gt;.
Once XCode is installed, run &lt;code class=&quot;highlighter-rouge&quot;&gt;xcode-select -install&lt;/code&gt; from the Terminal.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/teamcity/&quot;&gt;TeamCity&lt;/a&gt; or another CI solution. My guide will use TeamCity, 
because it’s what I’m most familiar with, as well as because it has &lt;em&gt;XCode support out-of-the-box&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;(Optional) &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; or another package manager. This simplifies
building dependencies on the build agent, as you’ll see later in the guide.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;step-1-setting-up-the-ci-server&quot;&gt;Step 1: Setting up the CI Server&lt;/h1&gt;

&lt;p&gt;In my example, I’ll be setting it up on a MacOS machine. If using a Linux or BSD machine, this should be
similar. For a Windows machine, your mileage may vary.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;First, ensure that your computer has 
&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;JDK 1.8&lt;/a&gt; installed.
Note that this is the most recent version at the time of writing, and so in the future this dependency may
change. If you are not using TeamCity, this step may or may not be necessary.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-teamcity-service&quot;&gt;Setting up the TeamCity Service&lt;/h2&gt;

&lt;p&gt;To start, on the machine that will be running the CI server, download 
&lt;a href=&quot;https://www.jetbrains.com/teamcity/download/#&quot;&gt;TeamCity&lt;/a&gt;. There are respective download options for various
common operating systems. In this tutorial, I’m assuming use of one of the tar.gz downloads. 
If using FreeBSD or another flavor of BSD, the Linux version should work. It’s up
to you to choose the version that’s right for you. If the machine running this server is a MacOS laptop,
I highly recommend also downloading &lt;a href=&quot;https://integralpro.github.io/nosleep/&quot;&gt;NoSleep&lt;/a&gt; and
&lt;a href=&quot;https://itunes.apple.com/us/app/amphetamine/id937984704?mt=12&quot;&gt;Amphetamine&lt;/a&gt; to keep it running at all
times. This assumes a dedicated computer; for a small or temporary setup, using a non-dedicated computer 
(such as a dev laptop) may be sufficient.&lt;/p&gt;

&lt;p&gt;In the extracted directory structure, the configuration files can be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;conf&lt;/code&gt; and the executable
files can be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt;. The configuration files can be changed to suit your needs. I won’t get into it
here, but if you want to customize your settings, look up a guide on configuring TomCat.&lt;/p&gt;

&lt;p&gt;Navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; in your Terminal, and run &lt;code class=&quot;highlighter-rouge&quot;&gt;./runAll.sh start&lt;/code&gt;. This will start the server, and you can expect
an output similar to the following. To stop the process, run &lt;code class=&quot;highlighter-rouge&quot;&gt;./runAll.sh stop kill&lt;/code&gt;. Note that this process
will not run on startup, and you will need to use launchd/systemd/Services as appropriate for the OS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-runAll-start.jpg&quot; alt=&quot;Sample output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now navigate to &lt;a href=&quot;http://localhost:8111/&quot;&gt;http://localhost:8111/&lt;/a&gt;. If accessing this from a machine other
than the one you just set up the server on, use that machine’s hostname instead of localhost. You’ll see
a setup dialog, similar to the one below. Walk through the setup process. The default settings should be
fine for simple use cases.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-setup-dialog.jpg&quot; alt=&quot;Setup Dialog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve finished the process and created an administrator account, you’re ready to start using TeamCity.
If it’s installed on MacOS, it will also install the TeamCity agent, which will make the next step easier.&lt;/p&gt;

&lt;p&gt;From there, go to the administration page. From the administration page, create a project, and create a
build configuration under that project. I recommend creating a project from a VCS source, as this will
make things easier down the line.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-admin-page-link.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/files/images/posts/2017-03-07-create-project.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Setting up additional user accounts, builds, and other settings is left as an exercise to the reader 😉.&lt;/p&gt;

&lt;h3 id=&quot;some-nice-additions&quot;&gt;Some nice additions&lt;/h3&gt;
&lt;p&gt;If you’re running this on a company network, or you use a VPN to connect to the server, you’re probably done.
However, if this is for personal use or for use of a small project, you may want to look at a DDNS configuration.
DDNS means Dynamic Domain Name System. Basically, it sets it up such that a computer that may or may not
have a permanent IP address has a domain name that tracks it and follows it wherever it goes. You can get
a free version of this service from &lt;a href=&quot;https://ddns.net&quot;&gt;ddns.net&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configuring-your-build-steps&quot;&gt;Configuring your Build Steps&lt;/h2&gt;

&lt;p&gt;TeamCity will try to auto-detect build steps. If they’re appropriate for you, you can use them. If not,
creating them manually is easy. My example build will contain four steps, but these can be adjusted as
necessary.&lt;/p&gt;

&lt;h3 id=&quot;substep-1-dependency-resolution&quot;&gt;Substep 1: Dependency Resolution&lt;/h3&gt;
&lt;p&gt;The goal of this step is to ensure that your build agent has whatever software packages or libraries
your app will need to work.&lt;/p&gt;

&lt;p&gt;You only need to follow this step if you use a package manager for dependency resolution (which I 
&lt;strong&gt;&lt;em&gt;highly&lt;/em&gt;&lt;/strong&gt; recommend). If you don’t, resolving dependencies is left up to you. Note that the following 
are simplified somewhat; best practices would dictate that one store something like the path to 
&lt;code class=&quot;highlighter-rouge&quot;&gt;carthage&lt;/code&gt; in an environment variable. This would make it scale better if you have more than one build 
agent, or if some agents do not have &lt;code class=&quot;highlighter-rouge&quot;&gt;carthage&lt;/code&gt; installed.&lt;/p&gt;

&lt;p&gt;Create a command line build step, as shown below. Name the step something like “dependency resolution”
or “Carthage” (if you’re using Carthage as a package manager). For the “build script content” you’ll enter
something like &lt;code class=&quot;highlighter-rouge&quot;&gt;carthage bootstrap --platform iOS&lt;/code&gt;. The industry standard for dependency resolution is
&lt;a href=&quot;https://cocoapods.org/&quot;&gt;Cocoapods&lt;/a&gt;, but carthage has a slightly simpler setup. When running builds, this 
may make it take a bit longer, but the reliability is worth the minutes in my opinion. Note that if this
is a concern, cocoapods can be faster.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-carthage-step.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;substep-2-simulator-configuration&quot;&gt;Substep 2: Simulator Configuration&lt;/h3&gt;
&lt;p&gt;First, some background: In order to run tests, XCode uses an app, the aptly-named Simulator, which 
simulates an iOS device. When you run tests, it will open the simulator, install the app you’re testing 
onto it, and then run tests through the app it installed.&lt;/p&gt;

&lt;p&gt;The iOS Simulator can cause lots of problems if not handled properly. This step makes the builds much easier
and much more reliable, albeit taking a few minutes longer. Ignoring this step can cause your build to
hang indefinitely.&lt;/p&gt;

&lt;p&gt;Before you do this, identify the iOS simulator that you want to build for and run your tests. 
You will have multiple options for the various devices that Apple supports, such as the iPhone 7 or the 
iPhone SE. If you wish to use multiple simulators, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;xcrun&lt;/code&gt; commands shown below should be run
for those devices as well. To get a list of possible devices, run &lt;code class=&quot;highlighter-rouge&quot;&gt;xcrun simctl list&lt;/code&gt;. This will give you 
a list of the devices, and their GUIDs, available for testing. Let’s say we choose the GUID 
“94639904-0FEF-4E7F-9F74-F22631A15DBE”. In the following steps, replace that GUID with the GUID of your
choice (or better yet, put it in an environment variable on the build agent).&lt;/p&gt;

&lt;p&gt;Once again, create a command line build step. Call the step something like “Reset Simulator”. For the
script content, enter the following (with your simulated device’s GUID):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcrun simctl shutdown 94639904-0FEF-4E7F-9F74-F22631A15DBE
killall Simulator
killall com.apple.CoreSimulator.CoreSimulatorService
xcrun simctl erase 94639904-0FEF-4E7F-9F74-F22631A15DBE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first line shuts down the simulator for the device if it’s running. The second and third lines ensure
that the Simulator is shut down, to ensure a sanitary testing environment. Finally, the final line erases
the content and settings of the simulated device. This ensures both a sanitary testing environment, and
avoids an issue where, when running an automated build, it can hang indefinitely.&lt;/p&gt;

&lt;h3 id=&quot;substep-3-the-fun-part&quot;&gt;Substep 3: The Fun Part&lt;/h3&gt;
&lt;p&gt;At long last, it’s time to set up our XCode build step! In the build step type, select XCode Project.
Click “Show advanced options”. Set the Path to the project or workspace to your .xcodeproj file. Use a
scheme-based build. (Note that to use scheme-based builds, you must configure a build scheme in XCode and
push your changes to VCS.) Set build action(s) to &lt;code class=&quot;highlighter-rouge&quot;&gt;clean build&lt;/code&gt;. Check the “Run tests” box. Finally, in
the Additional command line parameters box, enter the following: 
&lt;code class=&quot;highlighter-rouge&quot;&gt;-destination &quot;id=94639904-0FEF-4E7F-9F74-F22631A15DBE&quot;&lt;/code&gt;. This will tell it to run the build on and for
the device we set up in the previous step.&lt;/p&gt;

&lt;p&gt;Here’s an example of my setup for one of my projects (with some minor changes to make it more readable):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-xcode-step.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;substep-4-cleanup&quot;&gt;Substep 4: Cleanup&lt;/h3&gt;
&lt;p&gt;Finally, we want to clean up to save resources. This is fairly self-explanatory. Create a final command-line
step with the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcrun simctl shutdown %env.simulator_guid%
killall Simulator
killall com.apple.CoreSimulator.CoreSimulatorService
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;icing-on-the-cake&quot;&gt;Icing on the cake&lt;/h2&gt;
&lt;p&gt;Finally, a few options to add some nice features to your build.&lt;/p&gt;

&lt;h3 id=&quot;vcs&quot;&gt;VCS&lt;/h3&gt;
&lt;p&gt;Head to the version control settings tab of the build configuration. Here, you can customize your VCS
settings. In the branch specification, I recommend choosing which branches the server should run. To run
all branches and commits, enter &lt;code class=&quot;highlighter-rouge&quot;&gt;+:*&lt;/code&gt; in the branch specification box.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-vcs-config.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/files/images/posts/2017-03-07-branch-spec.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vcs-labeling&quot;&gt;VCS Labeling&lt;/h3&gt;
&lt;p&gt;TeamCity has a lot of really cool features. One of my favorites is VCS labeling. To reach this, go to the
Build Features tab. Click “Add build feature” and select the VCS root and the branches you want to enable
it for. I like to set up two of these: One with the labeling pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;build-%system.build.number%&lt;/code&gt; for all
builds, and one with the labeling pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;build-%system.build.number%-passed&lt;/code&gt; that is added to successful
builds only. Then, from a GUI client like SourceTree, you can see at a glance which build is associated
with which commit, as well as which commits failed.&lt;/p&gt;

&lt;h1 id=&quot;step-2-setting-up-the-teamcity-agent&quot;&gt;Step 2: Setting up the TeamCity Agent&lt;/h1&gt;
&lt;p&gt;If your agent is the same as the CI server, skip to step 3.&lt;/p&gt;

&lt;p&gt;There are some basic requirements for setup. If these requirements are not met, you will &lt;strong&gt;not&lt;/strong&gt; be able to 
successfully install the agent.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The desired agent must have a stable (and preferably fast) internet connection.&lt;/li&gt;
  &lt;li&gt;The desired agent must have space to install the agent.&lt;/li&gt;
  &lt;li&gt;Time. The agent will take a while to install, because the agent installation process installs all of its
dependencies (and there are a lot of them). Let the agent sit for an hour (depending on connection speed)
before you decide that something’s wrong. Activity monitor may be used to investigate. The name of the
process running the installation is “java”. There may be multiple processes doing this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the MacOS machine you want to run as an agent, the simplest way is using TeamCity’s &lt;em&gt;agent push&lt;/em&gt;
functionality. To use this, you must enable remote login on the desired agent in System Preferences &amp;gt;
Sharing. This allows TeamCity to ssh to your machine and install the agent. To use TeamCity’s agent push
functionality, you must either be on the same network, or have an IP/DNS address at which the &lt;strong&gt;server&lt;/strong&gt;
will be able to reach the &lt;strong&gt;agent&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To reach TeamCity’s agent push functionality, click the “Agents” tab at the top menu. In the submenu, 
select agent push, and then click the install agent button. Enter appropriate details for the agent,
then go.&lt;/p&gt;

&lt;p&gt;If you can’t use agent push, it may be more reliable to manually install. To manually install, go to the
“Agents” tab at the top, then click the link on the right that says “Install build agent”, and select the
zip file distribution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-agent-install.jpg&quot; alt=&quot;Agent Installation&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuring&quot;&gt;Configuring&lt;/h2&gt;
&lt;p&gt;Once the agent is installed, you can configure the agent’s settings in the &lt;code class=&quot;highlighter-rouge&quot;&gt;conf/buildAgent.properties&lt;/code&gt;
file. Here you can set the agent name, environment variables for TeamCity, and more.&lt;/p&gt;

&lt;h2 id=&quot;running&quot;&gt;Running&lt;/h2&gt;
&lt;p&gt;To run, in Terminal navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; folder. Then, run &lt;code class=&quot;highlighter-rouge&quot;&gt;./agent.sh start&lt;/code&gt;. To stop the process, run
&lt;code class=&quot;highlighter-rouge&quot;&gt;./agent.sh stop kill&lt;/code&gt;. This will &lt;strong&gt;not&lt;/strong&gt; run on start, but you can find tutorials online for configuring
this with launchd. I recommend &lt;a href=&quot;http://www.soma-zone.com/LaunchControl/&quot;&gt;Launch Control&lt;/a&gt; to make configuring
these easier.&lt;/p&gt;

&lt;h1 id=&quot;step-3-concluding&quot;&gt;Step 3: Concluding&lt;/h1&gt;
&lt;p&gt;You’re set up! Congratulations! 🎉&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Mar 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/tutorial/2017/03/07/XCode-CI-Article.html</link>
        <guid isPermaLink="true">http://localhost:4000/tutorial/2017/03/07/XCode-CI-Article.html</guid>
        
        <category>Apple,</category>
        
        <category>programming</category>
        
        
        <category>Tutorial</category>
        
      </item>
    
      <item>
        <title>3 Things I Like About Swift</title>
        <description>&lt;div class=&quot;col-md-9&quot;&gt;

Within the past several months, I've been working a lot in Swift 3 and XCode 8. The language was a brand
new experience for me, and there was quite a learning curve. I've never worked with a language like it and
while, as always, programming skills carry over, the syntax of Swift proved tricky. However, after this time,
I've either gained an appreciation for some of the more novel features in Swift, or else I've gained
stockholm syndrome. Determining which is left as an exercise to the reader.

&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/swift/images/swift-og.png&quot; class=&quot;img-rounded col-md-3&quot; style=&quot;padding-bottom: 20px;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-nil-nada-nothing&quot;&gt;1. Nil! Nada! Nothing!&lt;/h1&gt;
&lt;p&gt;That’s right, “nil”. That’s what null is called. Yes, it’s weird that they’ve eschewed traditional
labeling in favor of this. The logic kind of makes sense, but I won’t go into it - I’m not actually here
to talk about nil, but about &lt;em&gt;how it’s handled&lt;/em&gt; in Swift.&lt;/p&gt;

&lt;p&gt;In C#, there’s a concept called &lt;strong&gt;Nullable.&lt;/strong&gt; This makes primatives, like floating-point numbers and 
integers, which one would not normally be able to assign a value of null, to be assigned null. 
This is often quite useful when you want primatives to behave like normal objects. Swift implements a
similar system, but instead it works for any object.&lt;/p&gt;

&lt;p&gt;As an example, say you have a “Point” object, stored in the variable point.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var point: Point = Point(1, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The variable point can never be nil. If one tries the following code: &lt;code class=&quot;highlighter-rouge&quot;&gt;point = nil&lt;/code&gt; it will raise a compiler
error. However, if you wanted it to be able to be nil, all you have to do is add a ‘?’ to Point, so that
the type is now “nillable”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var point: Point? = Point(1, 3)
point = nil
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This seems novel at first, but in conjunction with other features (one of which is coming up next) it really
simplifies programming. When writing a function, if one wants, they can mandate that no values passed in are
nil, which can simplify edge cases and testing. Now, onto “nillable’s” best friend:&lt;/p&gt;

&lt;h1 id=&quot;2-guard-statements&quot;&gt;2. Guard Statements&lt;/h1&gt;
&lt;p&gt;Guard statements were, for me, covered briefly in a class, but beyond that, not talked about much. A guard
statement is a statement at the beginning of a function where it’s decided whether the function can basically
work. They’re often used to check for null or for error conditions. Swift, however, has its own dedicated
keyword for this, logically called &lt;code class=&quot;highlighter-rouge&quot;&gt;guard&lt;/code&gt;. The keyword alone is useful for keeping code readable, because
one can see the keyword, realize it’s just checking for error conditions, and skip over it when understanding
how some code works.&lt;/p&gt;

&lt;p&gt;But other than that, what benefits are there? For one, they force good practice; the compiler won’t allow
you to forget to &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt;, or execute some other control flow. They allow one to create variables
for future use, allowing one to seamlessly unwrap a nillable. Here’s that in practice:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func doThing(thisReallyShouldNotBeNil: Int?, shouldBeTrue: Bool) {
    guard let notNil = thisReallyShouldNotBeNil else {
        print(&quot;you put in nil you dummy!&quot;)
        return
    }
    guard shouldBeTrue == true else {
        print(&quot;This should never happen :P&quot;)
        return
    }
    
    // notNil is an Int now, not an Int?.
    
    print(notNil != nil) // you will get a compiler warning because this will never be possible. 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Obviously this is simplified, but it becomes very powerful in keeping things from getting out of hand as 
they get more complicated.&lt;/p&gt;

&lt;h1 id=&quot;3-string-templating&quot;&gt;3. String Templating&lt;/h1&gt;
&lt;p&gt;Y’all, this is the best templating I’ve ever seen. Even better than Ruby or C#. It’s simply beautiful. Say
one wants to print out a person’s information:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print(&quot;Name: \(person.name)    Height: \(person.height)    Profession: \(person.profession)&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s the simplest thing. Backslash, parenthesis. Fits the context of the language, is perfectly clear,
and is one of the least verbose methods out there in any language. Simple beauty. It’s the small things in
life.&lt;/p&gt;

&lt;h1 id=&quot;the-bad&quot;&gt;The Bad&lt;/h1&gt;
&lt;p&gt;Swift is an innovative, different, and unique language, and it has its share of bad. Most of it boils down to&lt;/p&gt;

&lt;h2 id=&quot;xcode&quot;&gt;XCode&lt;/h2&gt;
&lt;p&gt;Swift is hard to build without XCode. Really hard. Even JetBrains’ AppCode relies on opening XCode for 
certain operations. One of the main reasons for this boils down to the flat filemap. In most programming
languages, if you put something in a folder, that means it’s in that folder in the operating system.
This makes traversing and interacting with your project from the command line natural. Instead, there’s an
XML file that keeps track of the folder and subfolder in every file. If you want to look at the project as
intended, you need XCode. While this maps well to Apple’s (and arguable BSD’s) centralized philosophy, it’s
an annoyance to developers.&lt;/p&gt;

&lt;p&gt;XCode is buggy and crash-prone; lots of times features simply stop working and XCode needs to be restarted.
It reminds me of my early days with Eclipse over 5 years ago, and even then I believe Eclipse was more 
reliable.&lt;/p&gt;

&lt;p&gt;Beyond that, it just has poor design in many ways. Keyboard shortcuts aren’t shown in menus, the toolbar is
at times incomplete, and “generate” code functionality is painfully absent, to name a few.&lt;/p&gt;

&lt;h1 id=&quot;closing&quot;&gt;Closing&lt;/h1&gt;
&lt;p&gt;So yes, I like Swift quite a bit. It winds up being a different language, but some of the language features
have shown to not only be nice to use, but to be very forward-thinking in terms of keeping large codebases 
sustainable. It also keeps up with more modern functionality, syntax, and paradigms quite well, while also
putting its own spin on it.&lt;/p&gt;

&lt;p&gt;Finally, it’s important to consider that Swift is designed very specifically around building UI apps. In
this way it’s often more specific, or at least has a different focus, than many other languages. When 
learning it, it’s important to keep an open mind, and to give Swift’s way of doing things a shot. I’m glad
I did.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Feb 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/apple/2017/02/23/3-Things-About-Swift.html</link>
        <guid isPermaLink="true">http://localhost:4000/apple/2017/02/23/3-Things-About-Swift.html</guid>
        
        <category>swift</category>
        
        <category>programming</category>
        
        
        <category>Apple</category>
        
      </item>
    
  </channel>
</rss>
