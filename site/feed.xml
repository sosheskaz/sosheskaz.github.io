<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eric Miller's Website</title>
    <description>My personal website. A place for my stuff.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 19 Mar 2017 17:17:04 -0500</pubDate>
    <lastBuildDate>Sun, 19 Mar 2017 17:17:04 -0500</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Automatically Adding Screenshots to Photos in MacOS</title>
        <description>&lt;p&gt;I take a lot of screenshots. I use them for my website, for memory, for laughs, and a lot more. However,
I also take lots of screenshots on my phone. So it winds up being really weird (and inconvenient) when the
screenshots on my computer and the screenshots on my phone are organized differently and in completely
different places.&lt;/p&gt;

&lt;p&gt;So naturally, being the procrastinating programmer I am, I engineered a solution to consolidate everything
in one nice, organized package. Basically, I set up a simple app/script that anytime I take a screenshot
on my computer, it gets added to Photos.app, and shared in a simple, clean way across my devices. To
enable iCloud Photo Sync across your devices, open System Preferences and navigate to the iCloud
preference pane. Check the checkbox next to “Photos”. That’s it!&lt;/p&gt;

&lt;p&gt;I’ll tell you know, this can get a bit technical, but don’t worry. I’ll be here, going step by step, and
the entire process is perfectly safe.&lt;/p&gt;

&lt;h2 id=&quot;outcome&quot;&gt;Outcome&lt;/h2&gt;
&lt;p&gt;Whenever you take a screenshot with your Mac, it will be uploaded to Apple Photos in a folder called 
“MacOS Screenshots”, and shared across devices (if iCloud sync is enabled).&lt;/p&gt;

&lt;h2 id=&quot;caveats&quot;&gt;Caveats&lt;/h2&gt;
&lt;p&gt;When I set this up, I initially tried to unify my iOS screenshots and my MacOS screenshots into a single
folder. Unfortunately this isn’t quite easily possible (that I know of) without jailbreaking.&lt;/p&gt;

&lt;h1 id=&quot;how-to-take-screenshots&quot;&gt;How to Take Screenshots&lt;/h1&gt;
&lt;p&gt;MacOS has some pretty useful, and pretty powerful, screenshotting tools. There are three important ones,
which all have slightly different effects.&lt;/p&gt;

&lt;h2 id=&quot;1-full-screen&quot;&gt;1. Full Screen&lt;/h2&gt;
&lt;p&gt;This mode takes a screenshot of your entire screen. Everything is visible. This is quick and easy, but if
you’re sharing screenshots publicly, it may give out more information than you want. To take this kind of
screenshot, the shortcut is &lt;em&gt;cmd-shift-3&lt;/em&gt;. Following is what the result will look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-full-screen.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-grabbing&quot;&gt;2. Grabbing&lt;/h2&gt;
&lt;p&gt;This mode allows you to specify (“Grab”) a portion of your screen and save that. This lets you choose a 
more manageable chunk of your screen to use as a screenshot, rather than the whole thing. The shortcut is
&lt;em&gt;cmd-shift-4&lt;/em&gt;. Once this is done, your cursor will turn into a crosshair. Click and drag over the area you
want to screenshot. Here’s what that could look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-grabber.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-window-screenshots&quot;&gt;3. Window Screenshots&lt;/h2&gt;
&lt;p&gt;This mode takes a screenshot of just one application window. This is nice, and it’s what I usually use in
my posts and tutorials. To use it, you first enter the Grabbing shortcut, &lt;em&gt;cmd-shift-4&lt;/em&gt;. Then, press space.
Your cursor will turn into a picture of a camera. Then, just click on the window you want to screenshot. 
Another nice side effect of this kind of screenshot is that, unlike the other two, it ignores any
transparency effects, so it looks very clean. Here’s an example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-app-screenshot.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-1-isolating-screenshots&quot;&gt;Step 1. Isolating Screenshots&lt;/h1&gt;
&lt;p&gt;Historically, I’ve always set my computer to save screenshots to a special screenshots folder. I recommend
doing this here too, because it simplifies things and minimizes any potential weird side effects by
ensuring a sanitary working space. To do this, I recommend creating a folder in the Pictures folder (this
can be found in your home directory) called “Screenshots”. Mine looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-screenshots-folder.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first step here is to download &lt;a href=&quot;http://www.titanium.free.fr/onyx.html&quot;&gt;OnyX&lt;/a&gt;. This can be done without
OnyX, but this is the easiest way to do it. When you first open OnyX, it will give you some instructions
that will allow it to function properly. Follow these closely and carefully. OnyX is a safe tool, but also
a very powerful one. This means if it doesn’t have the resources it needs, it may not be able to do things
correctly. &lt;strong&gt;NOTE: When you launch OnyX, it will &lt;em&gt;temporarily&lt;/em&gt; lock up your computer. This is normal,
just wait for it to finish. It could take as long as a few minutes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, click on the “Parameters” tab. This tab can do lots of fun things, and you can feel free to explore
these on your own. However, we will now navigate to the “General” subtab as shown. Next, click the “select”
button next to the “path” field as shown. Now, in the popup window, select the Screenshots folder you just
created. **NOTE: I have a slightly different configuration, for personal backwards compatibilty reasons,
so my path is different. Yours should look something like: &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/yourusername/Pictures/Screenshots&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now take a screenshot; instead of showing up on the desktop, it should appear in your screenshots folder.
Now you have a dedicated screenshots folder where everything can go! We’re halfway there.&lt;/p&gt;

&lt;h1 id=&quot;step-2-preparing-photosapp&quot;&gt;Step 2. Preparing Photos.app&lt;/h1&gt;
&lt;p&gt;Now, we have to do some work with Photos.app to make sure our step 3 works right. This is pretty easy.
First, open Photos. In the top toolbar, there should be a large “plus” button. Click it, then in the menu
it opens, select “Album”. You can name this album whatever you want, but you’ll need to remember it for
step 3. I recommend something like “Screenshots: MacOS”.&lt;/p&gt;

&lt;p&gt;Once this album is created, it should be empty - this is ok.&lt;/p&gt;

&lt;h1 id=&quot;step-3-the-folder-action&quot;&gt;Step 3. The “Folder Action”&lt;/h1&gt;
&lt;p&gt;Brace yourself, this is probably the most complicated part.&lt;/p&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;/Applications/Automator&lt;/code&gt;. Select “New Document”. It will give you a series of choices for the type
of document to create, as seen below. Select “Folder Action”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-automator-document-type.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the top right-hand corner, there’s a drop-down menu that says “Choose folder.” Click this, select
“Other”, and then choose the Screenshots folder we created in step 1.&lt;/p&gt;

&lt;p&gt;In the search bar on the upper left-hand side (Says “Name” in gray), type “Import”. A few options will
show up just below it - click and drag the file to the right-hand side, so your screen looks like mine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-automator-1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, in the drop-down menu that says “Import without adding to album”, select “Add to existing top-level
album”. A new field will show up just to the right of that - select the screenshots album you created in
step 2. Mine looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-automator-2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, press &lt;em&gt;cmd-s&lt;/em&gt; to save. Name the file something recognizable, like “Screenshots - Import to Photos”.&lt;/p&gt;

&lt;p&gt;Go back to your screenshots folder that you made in step 1. Right click the folder, and select 
Services &amp;gt; Folder Actions, as shown below. Finder will offer a bunch of suggestions - press cancel. Make
sure that the “Enable Folder Actions” checkbox is checked, just like in my screenshot. Make sure that the
folder and script are both checked as well, just like in mine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-Folder-Actions-Finder.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-19-folder-actions-window.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;congrats&quot;&gt;Congrats!&lt;/h1&gt;
&lt;p&gt;Now, whenever you take screenshots on your mac, they will be added to Photos and uploaded to iCloud (if
enabled.)&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2017/03/19/MacOS-Screenshots-AddToPhotos.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/19/MacOS-Screenshots-AddToPhotos.html</guid>
        
        
      </item>
    
      <item>
        <title>Apple, Muster your Courage. It's time for USB-C.</title>
        <description>&lt;p&gt;Apple, I’ve watched your progress over the last few years with interest. As a fan, follower, and analyst, I
feel I need to call you out on it when you’re making a mistake.&lt;/p&gt;

&lt;p&gt;And you’re making a mistake.&lt;/p&gt;

&lt;p&gt;USB-C is the future. You know this. It’s why your new laptops have solely USB-C (and despite what the haters
say, that’s a good thing). So it’s time to muster your famous &lt;em&gt;courage&lt;/em&gt;, and follow through on that.&lt;/p&gt;

&lt;p&gt;USB-C is the new standard. It may take some time to adopt, but it is. With up to 40Gbps throughput with the
thunderbolt standard, it’s the fastest mainstream port out there. It supports every kind of device people
use, from mice and keyboards, to headphones, to ethernet connections, and even to 4K displays. It even has
enough power throughput to power a laptop; that’s why you’re supporting power delivery from that port for 
the upcoming iPhones. And even through all of that, it’s relatively tiny (which I know you folks love).&lt;/p&gt;

&lt;p&gt;And I understand your hesitance, and your pain. The last time you changed the port on your iOS devices,
you faced enormous pushback. It’s not fun, and not good for a company in your position. But if you have the
courage to remove the aux jack from your iPhones, you have the courage to do this. And it’s worth doing. So
in the article that follows, I’ll lay out why this is a good idea, and why the pain of making the switch
is well worth it.&lt;/p&gt;

&lt;h1 id=&quot;1-user-experience&quot;&gt;1. User Experience&lt;/h1&gt;
&lt;p&gt;If there’s one thing Apple is famous for, it’s user experience. And not only user experience, but user
experience across devices. If I connect to WiFi on my mac, my phone will connect to it too. I can send
files back and forth with AirDrop easily. Hell, y’all have been pushing this more and more, with other
technologies like HandOff, Apple Watch unlock, and universal clipboard. And not to blow smoke, but you’ve
done a great job with it.&lt;/p&gt;

&lt;p&gt;But that’s software. When it comes to hardware, you’re sending mixed messages. If I buy a pair of lightning
headphones for my iPhone 7, I can’t then use them with my mac. If I buy a USB-C charging cable for one of
the new macs, I can’t then also use that to charge my phone. Imagine a world where, if I buy an accessory,
it works on every device I own. In terms of user experience, that’s something no one’s achieved yet. But
you can bet that’s where Android and Windows are going. If you don’t join them, Android and Windows will
start to blow you out of the water in terms of hardware compatibility. And I know that’s something you
don’t want.&lt;/p&gt;

&lt;p&gt;USB-C is an answer to the &lt;a href=&quot;https://xkcd.com/927/&quot;&gt;age-old problem of competing ports&lt;/a&gt;. You can either jump
into this new world with both feet, or you can be left in the dust by people who do.&lt;/p&gt;

&lt;h1 id=&quot;2-the-ipad-pro-line&quot;&gt;2. The iPad Pro Line&lt;/h1&gt;
&lt;p&gt;The iPad pro line is being marketed as a desktop replacement. In truth, you’re closer to that than your
competitors would like to admit, and further from it than you’d like to think.&lt;/p&gt;

&lt;p&gt;The simple fact is, as much as you believe that wireless is the future (as do I), the world still runs on
ports. You know this - it’s why you’re still putting ports on your laptops. One day, when wireless
charging from across the house works, the 802.11X WiFi standard has evolved, and Bluetooth reaches its true
potential, we’ll live in the world you dream about: a world without ports. But we’re not there. We’re not
even close.&lt;/p&gt;

&lt;p&gt;People - both professionals and consumers - need these ports. We need them to facilitate our presentations,
to print our documents, to share files, and to connect to secured networks. It may not be your ideal, but
it’s the world we live in. And you can’t truly call the iPad a “pro” until it can do these things.&lt;/p&gt;

&lt;p&gt;So even throwing away the ideas of “iOSX”, I believe that the iPad pro has the potential to be a truly
exceptional desktop replacement, even competing on an even playing field with something as fully-featured
as the Microsoft Surface Pro, likely even surpassing it.&lt;/p&gt;

&lt;p&gt;So let’s take a moment, and talk about three hypothetical graphic designers: Tom, Dick, and Sally. Tom uses
a fancy, new, top-of-the-line iPad Pro. Dick uses a generic laptop, let’s say a MacBook Pro. Sally uses a
Surface Pro.&lt;/p&gt;

&lt;p&gt;Tom and Sally, being the savvy purchasers they are, love their ability to draw right on their computers.
They have a clear advantage here over Dick, who needs a separate Wacom tablet. They also love the 
portability of their computers, so they can go meet with clients with just a small bag. Dick is frustrated
with his setup compared to his peers in this regard.&lt;/p&gt;

&lt;p&gt;Then, they have to get to work doing more sophisticated work. Tom and Sally use multiple monitors and an
ethernet hardline. Dick has an easy time of this, and Sally has the ports she needs to get it done. Tom, 
however, can’t do these tasks at all. The iPad doesn’t support that kind of multiple display setup at all,
and can’t do an ethernet hardline either. This means he can’t do anywhere near what his peers can, or work
as efficiently. Dick and Sally laugh at him for his purchase, and rightly so.&lt;/p&gt;

&lt;p&gt;And finally, they need to give a presentation. Tom brings his laptop, connects to the projector or 
big-screen display with no problem, and seamlessly gives his presentation. Sally can too, equally quickly.
Tom, however, is left in the dark. He has to send the presentation to a peer, and run it off their laptop.
How embarrassing.&lt;/p&gt;

&lt;p&gt;Now, do you see what I mean? The iPad pro is so close to being a feasible laptop replacement in terms of
software, but just doesn’t have the hardware to cut it. If it USB-C, and full software support for it, he
could easily keep up with Dick and Sally. His iPad would do everything he needs, and do it well. There is
so much potential for the iPad here, and it’s squandered just by this one simple shortcoming. It would make
your claims of it being a full-fledged desktop replacement a reality.&lt;/p&gt;

&lt;h1 id=&quot;3-lightning-licensing&quot;&gt;3. Lightning Licensing&lt;/h1&gt;
&lt;p&gt;I know, this would mean you lose out on licensing lightning products, and the income that comes with them.
I can’t claim to know how much profit you get from this, and I can only assume that both the loss of 
revenue and the corporate restructuring involved would be painful.&lt;/p&gt;

&lt;p&gt;But think about the points I just made. I believe there are a lot of people out there who would love to use
an iPad as a laptop replacement, but just can’t make the jump due to the shortcomings. Likewise, there’s no
doubt that the user experience improvements would improve your customer retention, and probably bring in
new users too. Not just that, but getting users into your ecosystem (and having your ecosystem become more
consistent/reliable) will encourage them to buy your other products, resulting in a multiplier effect.&lt;/p&gt;

&lt;p&gt;Further, think about the problems you’ve had with licensing. It discourages manufacturers from making 
accessories for your devices, and lowers their ROI. You need these people, and if you open up your
ecosystem to people to make more, and better, devices for your ecosystem, it’ll only spur your growth. And
that’s what’ll make you a successful company, not nickel-and-diming the manufacturers who build 
accessories to make your ecosystem richer.&lt;/p&gt;

&lt;p&gt;And of course, we all know you’ve had problems with counterfeiters. When some company cranks out subpar
devices and starts a house fire, you have to acknowledge that without the licensing issues, it would at
the very least be a &lt;em&gt;smaller&lt;/em&gt; issue. And given that if it wouldn’t be such a big problem if not for your
licensing practices, you are at least a little at fault for these incidents, for fostering an environment
where they’re &lt;del&gt;allowed&lt;/del&gt; encouraged to exist. If you really care about these problems, and about your
users, it would be ethical to cease this practice.&lt;/p&gt;

&lt;h1 id=&quot;in-closing&quot;&gt;In Closing&lt;/h1&gt;
&lt;p&gt;Adopting USB-C would be painful. But it’s not only the right thing to do, it’s in your best interest, from
almost every angle. While you’ll probably never read this, I can only hope that you’re still considering
the points I’ve made here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fscl01.fonpit.de/userfiles/4376948/image/AndroidPIT-usb-c-lighning-comparison-3.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sincerely, your pal and fan,&lt;/p&gt;

&lt;p&gt;Eric&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2017/03/16/iPad-USB-C.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/16/iPad-USB-C.html</guid>
        
        
      </item>
    
      <item>
        <title>Setting up Simple Continuous Integration for iOS Development</title>
        <description>&lt;p&gt;Setting up reliable continuous integration (CI) for XCode can be a nightmare. I personally wrestled with the
problem for a long while, eventually finding a somewhat convoluted workaround to make it work. However, I’ve
since found a way to develop and maintain a reliable CI solution. Following is how you can whip together something
similar.&lt;/p&gt;

&lt;p&gt;In this guide, you’ll find a start-to-finish CI solution for an XCode project.&lt;/p&gt;

&lt;h1 id=&quot;vocabulary&quot;&gt;Vocabulary&lt;/h1&gt;
&lt;p&gt;If you’re familiar with CI, you can probably skip this (short) section.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Version Control System (VCS): The system used for tracking changes and version control. In this example,
it is git/BitBucket.&lt;/li&gt;
  &lt;li&gt;CI Server: The server that monitors the VCS and tells build agents when and what to run.&lt;/li&gt;
  &lt;li&gt;Build Agent: The computer that runs builds and tests, at the behest of the CI server.&lt;/li&gt;
  &lt;li&gt;Package Manager: From &lt;a href=&quot;https://en.wikipedia.org/wiki/Package_manager&quot;&gt;Wikipedia&lt;/a&gt;: “A package manager or package management system is a collection of 
software tools that automates the process of installing, upgrading, configuring, and removing computer 
programs for a computer’s operating system in a consistent manner.” This means when you add new third-party
libraries, no additional work is necessary to make them work on the server.&lt;/li&gt;
  &lt;li&gt;Dependency Resolution: This is a technology that provides a way to programmatically install,
manage, and update third-party libraries.&lt;/li&gt;
  &lt;li&gt;GUID/UUID: Globally Unique IDentifier, or Universally Unique IDentifier. These two terms are
interchangeable. It is a 128-bit number that, when generated, is guaranteed to always be unique. It is
usually in hexadecimal, with a few dashes in between. If you want to know more, here’s the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier&quot;&gt;Wikipedia Article&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-youll-need&quot;&gt;What You’ll Need&lt;/h1&gt;
&lt;p&gt;Unfortunately, this process requires some resources that are not insubstantial. They are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A server to host your CI. This can be run on most operating systems, including MacOS, Windows, most Linux
distros, and even BSD. The server in my example is a dedicated computer running FreeBSD 11.0. Ideally, this
machine will have a high uptime, so a personal laptop is not ideal.&lt;/li&gt;
  &lt;li&gt;A build agent. This machine must run the most recent version of MacOS. A high uptime is ideal, but not
necessary for a small operation, like mine. I use a dedicated 2011 MacBook Pro using 
&lt;a href=&quot;https://integralpro.github.io/nosleep/&quot;&gt;NoSleep&lt;/a&gt;. This keeps the machine from going to sleep when closing
the lid. &lt;strong&gt;This can be the same machine as the CI server if desired&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;XCode must be installed on the build agent, along with all of the command line tools. It can
be installed from the &lt;a href=&quot;https://itunes.apple.com/us/app/xcode/id497799835?mt=12&quot;&gt;Mac App Store&lt;/a&gt;.
Once XCode is installed, run &lt;code class=&quot;highlighter-rouge&quot;&gt;xcode-select -install&lt;/code&gt; from the Terminal.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/teamcity/&quot;&gt;TeamCity&lt;/a&gt; or another CI solution. My guide will use TeamCity, 
because it’s what I’m most familiar with, as well as because it has &lt;em&gt;XCode support out-of-the-box&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;(Optional) &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage&lt;/a&gt; or another package manager. This simplifies
building dependencies on the build agent, as you’ll see later in the guide.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;step-1-setting-up-the-ci-server&quot;&gt;Step 1: Setting up the CI Server&lt;/h1&gt;

&lt;p&gt;In my example, I’ll be setting it up on a MacOS machine. If using a Linux or BSD machine, this should be
similar. For a Windows machine, your mileage may vary.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;First, ensure that your computer has 
&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;JDK 1.8&lt;/a&gt; installed.
Note that this is the most recent version at the time of writing, and so in the future this dependency may
change. If you are not using TeamCity, this step may or may not be necessary.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-teamcity-service&quot;&gt;Setting up the TeamCity Service&lt;/h2&gt;

&lt;p&gt;To start, on the machine that will be running the CI server, download 
&lt;a href=&quot;https://www.jetbrains.com/teamcity/download/#&quot;&gt;TeamCity&lt;/a&gt;. There are respective download options for various
common operating systems. In this tutorial, I’m assuming use of one of the tar.gz downloads. 
If using FreeBSD or another flavor of BSD, the Linux version should work. It’s up
to you to choose the version that’s right for you. If the machine running this server is a MacOS laptop,
I highly recommend also downloading &lt;a href=&quot;https://integralpro.github.io/nosleep/&quot;&gt;NoSleep&lt;/a&gt; and
&lt;a href=&quot;https://itunes.apple.com/us/app/amphetamine/id937984704?mt=12&quot;&gt;Amphetamine&lt;/a&gt; to keep it running at all
times. This assumes a dedicated computer; for a small or temporary setup, using a non-dedicated computer 
(such as a dev laptop) may be sufficient.&lt;/p&gt;

&lt;p&gt;In the extracted directory structure, the configuration files can be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;conf&lt;/code&gt; and the executable
files can be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt;. The configuration files can be changed to suit your needs. I won’t get into it
here, but if you want to customize your settings, look up a guide on configuring TomCat.&lt;/p&gt;

&lt;p&gt;Navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; in your Terminal, and run &lt;code class=&quot;highlighter-rouge&quot;&gt;./runAll.sh start&lt;/code&gt;. This will start the server, and you can expect
an output similar to the following. To stop the process, run &lt;code class=&quot;highlighter-rouge&quot;&gt;./runAll.sh stop kill&lt;/code&gt;. Note that this process
will not run on startup, and you will need to use launchd/systemd/Services as appropriate for the OS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-runAll-start.jpg&quot; alt=&quot;Sample output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now navigate to &lt;a href=&quot;http://localhost:8111/&quot;&gt;http://localhost:8111/&lt;/a&gt;. If accessing this from a machine other
than the one you just set up the server on, use that machine’s hostname instead of localhost. You’ll see
a setup dialog, similar to the one below. Walk through the setup process. The default settings should be
fine for simple use cases.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-setup-dialog.jpg&quot; alt=&quot;Setup Dialog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve finished the process and created an administrator account, you’re ready to start using TeamCity.
If it’s installed on MacOS, it will also install the TeamCity agent, which will make the next step easier.&lt;/p&gt;

&lt;p&gt;From there, go to the administration page. From the administration page, create a project, and create a
build configuration under that project. I recommend creating a project from a VCS source, as this will
make things easier down the line.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-admin-page-link.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/files/images/posts/2017-03-07-create-project.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Setting up additional user accounts, builds, and other settings is left as an exercise to the reader 😉.&lt;/p&gt;

&lt;h3 id=&quot;some-nice-additions&quot;&gt;Some nice additions&lt;/h3&gt;
&lt;p&gt;If you’re running this on a company network, or you use a VPN to connect to the server, you’re probably done.
However, if this is for personal use or for use of a small project, you may want to look at a DDNS configuration.
DDNS means Dynamic Domain Name System. Basically, it sets it up such that a computer that may or may not
have a permanent IP address has a domain name that tracks it and follows it wherever it goes. You can get
a free version of this service from &lt;a href=&quot;https://ddns.net&quot;&gt;ddns.net&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configuring-your-build-steps&quot;&gt;Configuring your Build Steps&lt;/h2&gt;

&lt;p&gt;TeamCity will try to auto-detect build steps. If they’re appropriate for you, you can use them. If not,
creating them manually is easy. My example build will contain four steps, but these can be adjusted as
necessary.&lt;/p&gt;

&lt;h3 id=&quot;substep-1-dependency-resolution&quot;&gt;Substep 1: Dependency Resolution&lt;/h3&gt;
&lt;p&gt;The goal of this step is to ensure that your build agent has whatever software packages or libraries
your app will need to work.&lt;/p&gt;

&lt;p&gt;You only need to follow this step if you use a package manager for dependency resolution (which I 
&lt;strong&gt;&lt;em&gt;highly&lt;/em&gt;&lt;/strong&gt; recommend). If you don’t, resolving dependencies is left up to you. Note that the following 
are simplified somewhat; best practices would dictate that one store something like the path to 
&lt;code class=&quot;highlighter-rouge&quot;&gt;carthage&lt;/code&gt; in an environment variable. This would make it scale better if you have more than one build 
agent, or if some agents do not have &lt;code class=&quot;highlighter-rouge&quot;&gt;carthage&lt;/code&gt; installed.&lt;/p&gt;

&lt;p&gt;Create a command line build step, as shown below. Name the step something like “dependency resolution”
or “Carthage” (if you’re using Carthage as a package manager). For the “build script content” you’ll enter
something like &lt;code class=&quot;highlighter-rouge&quot;&gt;carthage bootstrap --platform iOS&lt;/code&gt;. The industry standard for dependency resolution is
&lt;a href=&quot;https://cocoapods.org/&quot;&gt;Cocoapods&lt;/a&gt;, but carthage has a slightly simpler setup. When running builds, this 
may make it take a bit longer, but the reliability is worth the minutes in my opinion. Note that if this
is a concern, cocoapods can be faster.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-carthage-step.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;substep-2-simulator-configuration&quot;&gt;Substep 2: Simulator Configuration&lt;/h3&gt;
&lt;p&gt;First, some background: In order to run tests, XCode uses an app, the aptly-named Simulator, which 
simulates an iOS device. When you run tests, it will open the simulator, install the app you’re testing 
onto it, and then run tests through the app it installed.&lt;/p&gt;

&lt;p&gt;The iOS Simulator can cause lots of problems if not handled properly. This step makes the builds much easier
and much more reliable, albeit taking a few minutes longer. Ignoring this step can cause your build to
hang indefinitely.&lt;/p&gt;

&lt;p&gt;Before you do this, identify the iOS simulator that you want to build for and run your tests. 
You will have multiple options for the various devices that Apple supports, such as the iPhone 7 or the 
iPhone SE. If you wish to use multiple simulators, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;xcrun&lt;/code&gt; commands shown below should be run
for those devices as well. To get a list of possible devices, run &lt;code class=&quot;highlighter-rouge&quot;&gt;xcrun simctl list&lt;/code&gt;. This will give you 
a list of the devices, and their GUIDs, available for testing. Let’s say we choose the GUID 
“94639904-0FEF-4E7F-9F74-F22631A15DBE”. In the following steps, replace that GUID with the GUID of your
choice (or better yet, put it in an environment variable on the build agent).&lt;/p&gt;

&lt;p&gt;Once again, create a command line build step. Call the step something like “Reset Simulator”. For the
script content, enter the following (with your simulated device’s GUID):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcrun simctl shutdown 94639904-0FEF-4E7F-9F74-F22631A15DBE
killall Simulator
killall com.apple.CoreSimulator.CoreSimulatorService
xcrun simctl erase 94639904-0FEF-4E7F-9F74-F22631A15DBE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first line shuts down the simulator for the device if it’s running. The second and third lines ensure
that the Simulator is shut down, to ensure a sanitary testing environment. Finally, the final line erases
the content and settings of the simulated device. This ensures both a sanitary testing environment, and
avoids an issue where, when running an automated build, it can hang indefinitely.&lt;/p&gt;

&lt;h3 id=&quot;substep-3-the-fun-part&quot;&gt;Substep 3: The Fun Part&lt;/h3&gt;
&lt;p&gt;At long last, it’s time to set up our XCode build step! In the build step type, select XCode Project.
Click “Show advanced options”. Set the Path to the project or workspace to your .xcodeproj file. Use a
scheme-based build. (Note that to use scheme-based builds, you must configure a build scheme in XCode and
push your changes to VCS.) Set build action(s) to &lt;code class=&quot;highlighter-rouge&quot;&gt;clean build&lt;/code&gt;. Check the “Run tests” box. Finally, in
the Additional command line parameters box, enter the following: 
&lt;code class=&quot;highlighter-rouge&quot;&gt;-destination &quot;id=94639904-0FEF-4E7F-9F74-F22631A15DBE&quot;&lt;/code&gt;. This will tell it to run the build on and for
the device we set up in the previous step.&lt;/p&gt;

&lt;p&gt;Here’s an example of my setup for one of my projects (with some minor changes to make it more readable):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-xcode-step.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;substep-4-cleanup&quot;&gt;Substep 4: Cleanup&lt;/h3&gt;
&lt;p&gt;Finally, we want to clean up to save resources. This is fairly self-explanatory. Create a final command-line
step with the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcrun simctl shutdown %env.simulator_guid%
killall Simulator
killall com.apple.CoreSimulator.CoreSimulatorService
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;icing-on-the-cake&quot;&gt;Icing on the cake&lt;/h2&gt;
&lt;p&gt;Finally, a few options to add some nice features to your build.&lt;/p&gt;

&lt;h3 id=&quot;vcs&quot;&gt;VCS&lt;/h3&gt;
&lt;p&gt;Head to the version control settings tab of the build configuration. Here, you can customize your VCS
settings. In the branch specification, I recommend choosing which branches the server should run. To run
all branches and commits, enter &lt;code class=&quot;highlighter-rouge&quot;&gt;+:*&lt;/code&gt; in the branch specification box.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-vcs-config.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/files/images/posts/2017-03-07-branch-spec.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vcs-labeling&quot;&gt;VCS Labeling&lt;/h3&gt;
&lt;p&gt;TeamCity has a lot of really cool features. One of my favorites is VCS labeling. To reach this, go to the
Build Features tab. Click “Add build feature” and select the VCS root and the branches you want to enable
it for. I like to set up two of these: One with the labeling pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;build-%system.build.number%&lt;/code&gt; for all
builds, and one with the labeling pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;build-%system.build.number%-passed&lt;/code&gt; that is added to successful
builds only. Then, from a GUI client like SourceTree, you can see at a glance which build is associated
with which commit, as well as which commits failed.&lt;/p&gt;

&lt;h1 id=&quot;step-2-setting-up-the-teamcity-agent&quot;&gt;Step 2: Setting up the TeamCity Agent&lt;/h1&gt;
&lt;p&gt;If your agent is the same as the CI server, skip to step 3.&lt;/p&gt;

&lt;p&gt;There are some basic requirements for setup. If these requirements are not met, you will &lt;strong&gt;not&lt;/strong&gt; be able to 
successfully install the agent.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The desired agent must have a stable (and preferably fast) internet connection.&lt;/li&gt;
  &lt;li&gt;The desired agent must have space to install the agent.&lt;/li&gt;
  &lt;li&gt;Time. The agent will take a while to install, because the agent installation process installs all of its
dependencies (and there are a lot of them). Let the agent sit for an hour (depending on connection speed)
before you decide that something’s wrong. Activity monitor may be used to investigate. The name of the
process running the installation is “java”. There may be multiple processes doing this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the MacOS machine you want to run as an agent, the simplest way is using TeamCity’s &lt;em&gt;agent push&lt;/em&gt;
functionality. To use this, you must enable remote login on the desired agent in System Preferences &amp;gt;
Sharing. This allows TeamCity to ssh to your machine and install the agent. To use TeamCity’s agent push
functionality, you must either be on the same network, or have an IP/DNS address at which the &lt;strong&gt;server&lt;/strong&gt;
will be able to reach the &lt;strong&gt;agent&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To reach TeamCity’s agent push functionality, click the “Agents” tab at the top menu. In the submenu, 
select agent push, and then click the install agent button. Enter appropriate details for the agent,
then go.&lt;/p&gt;

&lt;p&gt;If you can’t use agent push, it may be more reliable to manually install. To manually install, go to the
“Agents” tab at the top, then click the link on the right that says “Install build agent”, and select the
zip file distribution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-03-07-agent-install.jpg&quot; alt=&quot;Agent Installation&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuring&quot;&gt;Configuring&lt;/h2&gt;
&lt;p&gt;Once the agent is installed, you can configure the agent’s settings in the &lt;code class=&quot;highlighter-rouge&quot;&gt;conf/buildAgent.properties&lt;/code&gt;
file. Here you can set the agent name, environment variables for TeamCity, and more.&lt;/p&gt;

&lt;h2 id=&quot;running&quot;&gt;Running&lt;/h2&gt;
&lt;p&gt;To run, in Terminal navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; folder. Then, run &lt;code class=&quot;highlighter-rouge&quot;&gt;./agent.sh start&lt;/code&gt;. To stop the process, run
&lt;code class=&quot;highlighter-rouge&quot;&gt;./agent.sh stop kill&lt;/code&gt;. This will &lt;strong&gt;not&lt;/strong&gt; run on start, but you can find tutorials online for configuring
this with launchd. I recommend &lt;a href=&quot;http://www.soma-zone.com/LaunchControl/&quot;&gt;Launch Control&lt;/a&gt; to make configuring
these easier.&lt;/p&gt;

&lt;h1 id=&quot;step-3-concluding&quot;&gt;Step 3: Concluding&lt;/h1&gt;
&lt;p&gt;You’re set up! Congratulations! 🎉&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Mar 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2017/03/07/XCode-CI-Article.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/07/XCode-CI-Article.html</guid>
        
        
      </item>
    
      <item>
        <title>3 Things I Like About Swift</title>
        <description>&lt;div class=&quot;col-md-9&quot;&gt;

Within the past several months, I've been working a lot in Swift 3 and XCode 8. The language was a brand
new experience for me, and there was quite a learning curve. I've never worked with a language like it and
while, as always, programming skills carry over, the syntax of Swift proved tricky. However, after this time,
I've either gained an appreciation for some of the more novel features in Swift, or else I've gained
stockholm syndrome. Determining which is left as an exercise to the reader.

&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/swift/images/swift-og.png&quot; class=&quot;img-rounded col-md-3&quot; style=&quot;padding-bottom: 20px;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-nil-nada-nothing&quot;&gt;1. Nil! Nada! Nothing!&lt;/h1&gt;
&lt;p&gt;That’s right, “nil”. That’s what null is called. Yes, it’s weird that they’ve eschewed traditional
labeling in favor of this. The logic kind of makes sense, but I won’t go into it - I’m not actually here
to talk about nil, but about &lt;em&gt;how it’s handled&lt;/em&gt; in Swift.&lt;/p&gt;

&lt;p&gt;In C#, there’s a concept called &lt;strong&gt;Nullable.&lt;/strong&gt; This makes primatives, like floating-point numbers and 
integers, which one would not normally be able to assign a value of null, to be assigned null. 
This is often quite useful when you want primatives to behave like normal objects. Swift implements a
similar system, but instead it works for any object.&lt;/p&gt;

&lt;p&gt;As an example, say you have a “Point” object, stored in the variable point.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var point: Point = Point(1, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The variable point can never be nil. If one tries the following code: &lt;code class=&quot;highlighter-rouge&quot;&gt;point = nil&lt;/code&gt; it will raise a compiler
error. However, if you wanted it to be able to be nil, all you have to do is add a ‘?’ to Point, so that
the type is now “nillable”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var point: Point? = Point(1, 3)
point = nil
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This seems novel at first, but in conjunction with other features (one of which is coming up next) it really
simplifies programming. When writing a function, if one wants, they can mandate that no values passed in are
nil, which can simplify edge cases and testing. Now, onto “nillable’s” best friend:&lt;/p&gt;

&lt;h1 id=&quot;2-guard-statements&quot;&gt;2. Guard Statements&lt;/h1&gt;
&lt;p&gt;Guard statements were, for me, covered briefly in a class, but beyond that, not talked about much. A guard
statement is a statement at the beginning of a function where it’s decided whether the function can basically
work. They’re often used to check for null or for error conditions. Swift, however, has its own dedicated
keyword for this, logically called &lt;code class=&quot;highlighter-rouge&quot;&gt;guard&lt;/code&gt;. The keyword alone is useful for keeping code readable, because
one can see the keyword, realize it’s just checking for error conditions, and skip over it when understanding
how some code works.&lt;/p&gt;

&lt;p&gt;But other than that, what benefits are there? For one, they force good practice; the compiler won’t allow
you to forget to &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt;, or execute some other control flow. They allow one to create variables
for future use, allowing one to seamlessly unwrap a nillable. Here’s that in practice:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func doThing(thisReallyShouldNotBeNil: Int?, shouldBeTrue: Bool) {
    guard let notNil = thisReallyShouldNotBeNil else {
        print(&quot;you put in nil you dummy!&quot;)
        return
    }
    guard shouldBeTrue == true else {
        print(&quot;This should never happen :P&quot;)
        return
    }
    
    // notNil is an Int now, not an Int?.
    
    print(notNil != nil) // you will get a compiler warning because this will never be possible. 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Obviously this is simplified, but it becomes very powerful in keeping things from getting out of hand as 
they get more complicated.&lt;/p&gt;

&lt;h1 id=&quot;3-string-templating&quot;&gt;3. String Templating&lt;/h1&gt;
&lt;p&gt;Y’all, this is the best templating I’ve ever seen. Even better than Ruby or C#. It’s simply beautiful. Say
one wants to print out a person’s information:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print(&quot;Name: \(person.name)    Height: \(person.height)    Profession: \(person.profession)&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s the simplest thing. Backslash, parenthesis. Fits the context of the language, is perfectly clear,
and is one of the least verbose methods out there in any language. Simple beauty. It’s the small things in
life.&lt;/p&gt;

&lt;h1 id=&quot;the-bad&quot;&gt;The Bad&lt;/h1&gt;
&lt;p&gt;Swift is an innovative, different, and unique language, and it has its share of bad. Most of it boils down to&lt;/p&gt;

&lt;h2 id=&quot;xcode&quot;&gt;XCode&lt;/h2&gt;
&lt;p&gt;Swift is hard to build without XCode. Really hard. Even JetBrains’ AppCode relies on opening XCode for 
certain operations. One of the main reasons for this boils down to the flat filemap. In most programming
languages, if you put something in a folder, that means it’s in that folder in the operating system.
This makes traversing and interacting with your project from the command line natural. Instead, there’s an
XML file that keeps track of the folder and subfolder in every file. If you want to look at the project as
intended, you need XCode. While this maps well to Apple’s (and arguable BSD’s) centralized philosophy, it’s
an annoyance to developers.&lt;/p&gt;

&lt;p&gt;XCode is buggy and crash-prone; lots of times features simply stop working and XCode needs to be restarted.
It reminds me of my early days with Eclipse over 5 years ago, and even then I believe Eclipse was more 
reliable.&lt;/p&gt;

&lt;p&gt;Beyond that, it just has poor design in many ways. Keyboard shortcuts aren’t shown in menus, the toolbar is
at times incomplete, and “generate” code functionality is painfully absent, to name a few.&lt;/p&gt;

&lt;h1 id=&quot;closing&quot;&gt;Closing&lt;/h1&gt;
&lt;p&gt;So yes, I like Swift quite a bit. It winds up being a different language, but some of the language features
have shown to not only be nice to use, but to be very forward-thinking in terms of keeping large codebases 
sustainable. It also keeps up with more modern functionality, syntax, and paradigms quite well, while also
putting its own spin on it.&lt;/p&gt;

&lt;p&gt;Finally, it’s important to consider that Swift is designed very specifically around building UI apps. In
this way it’s often more specific, or at least has a different focus, than many other languages. When 
learning it, it’s important to keep an open mind, and to give Swift’s way of doing things a shot. I’m glad
I did.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Feb 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2017/02/23/3-Things-About-Swift.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/23/3-Things-About-Swift.html</guid>
        
        
      </item>
    
      <item>
        <title>Photos of the Sunrise</title>
        <description>&lt;p&gt;A few nights ago, I was up all night working. Around 6:30 AM I got done, and my watch told me it was less
than half an hour until sunrise (which was at 6:52). On a whim, I decided to go to the top of the hill by my house and
try to take some pictures. It turned out to be a really nice view, where even though it was obfuscated by
the lake, I could just barely see the horizon over the lake. I also like urban photography, so the early
morning street was another nice aspect in my opinion. The sun came out right in the corner of where the 
lake met some towers, which was less than ideal for me, but I still feel they came out well.&lt;/p&gt;

&lt;p&gt;The photos were also taken with the iPhone’s “Live Photos” function, where 1.5 seconds before and after
the photo are captured as low-framerate (albeit good enough to look decent) video. The photos here don’t
reflect this, but the movement of the cars add a nice dimension to the early-morning city.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;

&lt;p&gt;
&lt;a href=&quot;/files/albums/sunrise/sunrise - 1.jpg&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;/files/albums/sunrise/sunrise - 1low.jpg&quot; class=&quot;img-rounded col-md-4&quot; style=&quot;padding-bottom: 20px&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;/files/albums/sunrise/sunrise - 2.jpg&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;/files/albums/sunrise/sunrise - 2low.jpg&quot; class=&quot;img-rounded col-md-4&quot; style=&quot;padding-bottom: 20px&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;/files/albums/sunrise/sunrise - 3.jpg&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;/files/albums/sunrise/sunrise - 3low.jpg&quot; class=&quot;img-rounded col-md-4&quot; style=&quot;padding-bottom: 20px&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;/files/albums/sunrise/sunrise - 4.jpg&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;/files/albums/sunrise/sunrise - 4low.jpg&quot; class=&quot;img-rounded col-md-4&quot; style=&quot;padding-bottom: 20px&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;/files/albums/sunrise/sunrise - 5.jpg&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;/files/albums/sunrise/sunrise - 5low.jpg&quot; class=&quot;img-rounded col-md-4&quot; style=&quot;padding-bottom: 20px&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;/files/albums/sunrise/sunrise - 6.jpg&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;/files/albums/sunrise/sunrise - 6low.jpg&quot; class=&quot;img-rounded col-md-4&quot; style=&quot;padding-bottom: 20px&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;/files/albums/sunrise/sunrise - 7.jpg&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;/files/albums/sunrise/sunrise - 7low.jpg&quot; class=&quot;img-rounded col-md-4&quot; style=&quot;padding-bottom: 20px&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Feb 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2017/02/14/Sunrise-Photos.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/14/Sunrise-Photos.html</guid>
        
        
      </item>
    
      <item>
        <title>Apple Watch Review</title>
        <description>&lt;p&gt;So, I’ve recently come into posession of an Apple Watch. 
I like to wait before making value judgements on things, so here I am
writing a review a month later. For the record, this is a 42mm Series
2 model.&lt;/p&gt;

&lt;h1 id=&quot;overall&quot;&gt;Overall&lt;/h1&gt;

&lt;p&gt;In the time I’ve had it, I’ve gained a very favorable opinion of the
Apple Watch. Its user experience is definitely one of the best I’ve
experienced, and it feels very polished. Notably, integrating it 
into my daily life felt like second-nature, and I’ve even found 
myself using the features that I initially saw very little appeal 
in – in large part due to the incredible user experience that the
designers have achieved.&lt;/p&gt;

&lt;h1 id=&quot;cool-things-it-does&quot;&gt;Cool Things it Does&lt;/h1&gt;

&lt;p&gt;I’m going to start out by listing a lot of the really cool and
useful features of the watch that make an impact in my daily life.&lt;/p&gt;

&lt;h2 id=&quot;1-activity-tracking--health&quot;&gt;1. Activity Tracking &amp;amp; Health&lt;/h2&gt;

&lt;p&gt;Let me just start out by saying that if you’re a hardcore runner or
athlete, this watch will not replace your Garmin. It’s a consumer
product, not a professional one.&lt;/p&gt;

&lt;div class=&quot;col-md-12&quot;&gt;
&lt;img src=&quot;/files/images/posts/2017-01-27-Activity.jpg&quot; class=&quot;col-md-3&quot; /&gt;

&lt;p&gt;
This is a feature I was very skeptical about; I occasionally go to
the gym or do a small workout, but for the most part my main
exercise is my habit of pacing around. However, the health features
of the watch are so easy to use, and so good, that I found myself
using them regardless, and feel much better for it.
&lt;/p&gt;
&lt;p&gt;
Here's how it works: You have 3 circles: red, green, and blue. The
red circle tracks the calories you've burned over the course of the
day. The green tracks how many minutes you've moved/exercised for. The blue
tracks how many hours in the day in which you've stood up and moved
around *at least once*. There are goals set for each circle - the 
calorie goal is set to 500 by default (but is variable), while the exercise and stand
goals are set for 30 and 12, respectively. If you haven't stood up
in the last hour, at the 50 minute mark, it'll give you a little 
tap on your wrist and remind you to stand up and move around a little.
It sounds kind of silly, but it's a really effective psychological
reward mechanism.
&lt;/p&gt;
&lt;p&gt;
Finally, there's a program called &quot;Breathe&quot;. This is a really
simple little app that guides you through a deep breathing exercise.
It uses the sensor to figure out when you're a little stressed (or
in my case, drinking coffee) and offers to guide you through a deep
breathing exercise to cool down. I was skeptical of this too, but
I've found I feel a lot better when I do this – even for just a 
minute – once a day.

&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;2-notifications--and-the-sweet-sound-of-silence&quot;&gt;2. Notifications – And the Sweet Sound of Silence&lt;/h2&gt;

&lt;p&gt;Next up: the notifications on the watch. Personally, I’ve permanently
switched my phone to silent mode, because the tap on the wrist that
the Apple Watch gives you when you receive notifications is both
more noticeable and less disruptive than traditional phone notification
noises. Further, it lets you more efficiently ignore the unimportant
notifications you receive – newsletters, facebook comments, unimportant
texts – which is ultimately really nice. Of course, since the time
is also on the watch (duh), I’ve ultimately wound up looking at my
phone much less. For the little things you look at your phone for –
the time, the weather, music skipping/volume, notifications, timers – 
the Apple watch steps up and fills the role more conveniently and with
more subtlety.&lt;/p&gt;

&lt;h2 id=&quot;3-ping-or-mute-your-phone&quot;&gt;3. Ping or Mute your Phone&lt;/h2&gt;

&lt;p&gt;How often do you misplace your phone right next to you, but aren’t
sure where it is? Or go somewhere where you probably should turn on
Do Not Disturb mode, but meh it’s on vibrate and it’ll probably be fine.
The watch has quick buttons to do both of these things for you. You
can instantly turn Do Not Disturb on or off, and instantly make your
iPhone make a noise (or if you hold it down, flash the LED too) to
help you find it. Honestly, this is one of the smartest things they did.&lt;/p&gt;

&lt;h2 id=&quot;ending-the-rule-of-three&quot;&gt;Ending the Rule of Three&lt;/h2&gt;

&lt;p&gt;Of course there are lots of other cool things to do, including: auto-unlocking
your mac, being a stopwatch/nightstand-alarm-clock/timer, showing your
daily calendar, being a remote for your camera, and more – but this post
is already pretty long and I don’t want to bore you too much.&lt;/p&gt;

&lt;h1 id=&quot;complaints-and-grievances&quot;&gt;Complaints and Grievances&lt;/h1&gt;

&lt;p&gt;Of course, it wouldn’t be a fair review if I didn’t list some negatives.&lt;/p&gt;

&lt;h2 id=&quot;1-the-screen-is-small&quot;&gt;1. The Screen is Small&lt;/h2&gt;

&lt;p&gt;I knew this going in, but ultimately, there are simply limits on
what you can do with an interface on a 1.6” (or 1.5”) screen. While I think
Apple and third party vendors have, for the most part, created 
good interfaces given the screen size, it ultimately always falls
a little short. Force touch, the first time I used it, was a 
disappointment. For those not in the loop, force touch is a feature
in Apple’s touch screen products where applying more pressure when
selecting an item (i.e. pressing harder) performs a contextual action,
usually a menu related to the item you pressed. The second-gen Apple
Watches have this feature, but it doesn’t activate based on the item
you pressed, it activates based on the app or screen that is open.
This essentially makes force touch a “third button” rather than
adding a third dimension to the touch screen and, while it makes
sense for a screen this small, is disappointing.&lt;/p&gt;

&lt;h2 id=&quot;2-no-third-party-watch-faces&quot;&gt;2. No Third-Party Watch Faces&lt;/h2&gt;

&lt;div class=&quot;col-md-12&quot;&gt;
&lt;img src=&quot;/files/images/posts/2017-01-27-Face.jpg&quot; class=&quot;col-md-3&quot; /&gt;

&lt;p&gt;
One of the nice things, and something Apple put a good deal of 
effort into, was the watch faces. This is what you look at when 
you open your watch. Don't get me wrong, the customization is not
disappointing and the offerings are fairly good, but I believe
that third-party faces could add a lot of utility to the product.
Attached is the main face I use; it has buttons – called &quot;complications&quot; – 
to display extra information besides the time. The complications
come in multiple sizes, and third-party apps can be allowed to use them.
However, the watch faces are all created and controlled by Apple,
which throttles this customizability.
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;3-the-app-screen&quot;&gt;3. The App Screen&lt;/h2&gt;

&lt;div class=&quot;col-md-12&quot;&gt;
&lt;img src=&quot;/files/images/posts/2017-01-27-AppScreen.jpg&quot; class=&quot;col-md-3&quot; /&gt;

&lt;p&gt;
The app screen is arranged hexagonally. The rationale behind this
is understandable; it makes more sense when looking at this kind
of screen than the traditional rectangular grid. That said, working
with this screen is awful. I personally set up my watch faces such
that I can avoid this screen as much as possible. It's harder to
navigate, remember where apps are, and see apps. If I'm looking
for a specific app, I'll often miss it once or twice while looking
for it. Further, it's terrible to organize; unlike when moving 
apps on an iPhone, the direction that apps are displaced when one
moves them is unpredictable. This makes organizing the app screen
a pain, which of course makes it even harder to use.
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;closing&quot;&gt;Closing&lt;/h1&gt;
&lt;p&gt;Overall, the Apple Watch is very thoughtfully designed, offers a
lovely user experience, and integrates easily into one’s daily
routine. Being able to swap out watch bands is easy and cheap, so
it can be dressed for any occasion.&lt;/p&gt;

&lt;h2 id=&quot;should-i-buy-it&quot;&gt;Should I buy it?&lt;/h2&gt;
&lt;p&gt;…Probably not. While it’s certainly very cool (and useful), the starting 
price of $269 is, in my opinion, a bit steep. Despite this, if you
have money to burn and want a cool, handy gadget this may be for
you. It also makes an excellent and thoughtful gift.&lt;/p&gt;

&lt;p&gt;It should be noted that Apple offers discounts through its refurbished store,
where prices start at $229. In my experience (this was typed on a
refurbished Apple computer), their refurbishing program is just as
good as brand new.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Jan 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2017/01/27/Apple-Watch-Review.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/27/Apple-Watch-Review.html</guid>
        
        
      </item>
    
      <item>
        <title>Ethical Considerations in Advanced Robotics and AI</title>
        <description>&lt;p&gt;Advanced robotics and Artificial Intelligence is a very new area of scientific and sociological discussion. There wind up being a lot of problems with these kinds of products as they become increasingly complex, and when something goes wrong it’s not always clear whether responsibility lies with the user or with the manufacturer. I was inspired by &lt;a href=&quot;http://www.theverge.com/2017/1/19/14322334/robot-electronic-persons-eu-report-liability-civil-suits&quot;&gt;this article&lt;/a&gt;, where the author discussed&lt;/p&gt;

&lt;h1 id=&quot;important-terms&quot;&gt;Important Terms&lt;/h1&gt;
&lt;p&gt;AI: Artificial Intelligence - A human-created entity that can respond to external stimuli in a way that is &lt;em&gt;comparable&lt;/em&gt; to a human in terms of sophistication.&lt;/p&gt;

&lt;p&gt;Neural Network: Neural Net - A process that automatically uses feedback to improve itself.&lt;/p&gt;

&lt;h1 id=&quot;the-complexities-of-neural-networks&quot;&gt;The Complexities of Neural Networks&lt;/h1&gt;
&lt;p&gt;Over time, you may have heard the term “neural network” when talking about engineering. This is the technology that drives a lot of the upcoming, more impressive products like Google’s self-driving cars. It’s a paradigm born of the need to develop software more complex than humans are able to wrap their mind around. I’m delving into this subject first, because understanding the basic ideas behind this technology is imperative to discussing the ethical implications further on down the line.&lt;/p&gt;

&lt;h2 id=&quot;so-what-are-neural-networks&quot;&gt;So what are neural networks?&lt;/h2&gt;
&lt;p&gt;Neural networks are a new paradigm to programming that, rather than telling the computer what to do, tells it what you &lt;em&gt;want&lt;/em&gt; it to do. Rather than walk the computer through the process of following a task, you evaluate its performance at a task and it uses that feedback. This process is largely inspired by both how human beings learn things (by taking continuous feedback and linking it into how we do things) as well as the principles of evolution.&lt;/p&gt;

&lt;p&gt;For example, say you write a program to cook some pancakes. Because I like pancakes. In traditional programming, you would outline something like a recipe; it would go through all the steps, have clearly defined ingredients, quantities,  and cooking times. Then, once you eat the pancakes, you might go back and adjust the recipe for better pancakes.&lt;/p&gt;

&lt;p&gt;Using a neural network, the process is a bit different. You may start with a recipe, or even just a list of ingredients. Most likely, you’d program it with an initial, very basic recipe. Then, you’d develop a scoring system for the pancakes. Give some points for taste, nutritional value, and a relatively small number of points for deviation from the original recipe (so that as the “recipe” changes, it keeps making pancakes and doesn’t become completely indistinguishable). Next, it will take that original recipe and make minor random changes, and serves those modified recipes to people. If any score higher than the original, it uses that recipe going forward. Over time (with a &lt;strong&gt;lot&lt;/strong&gt; of samplings), the pancakes will be far superior to the original recipe.&lt;/p&gt;

&lt;h2 id=&quot;the-scary-side-of-neural-networks&quot;&gt;The Scary Side of Neural Networks&lt;/h2&gt;
&lt;p&gt;This is where things get kind of unnerving. Following the pancake metaphor, you’ll start to see the neural network doing really weird things that make no sense. If you start to look at the recipe, it will be extremely long and do things that make no sense. You’ll see seasonings that make no sense for pancakes, bizarrely complex ways of mixing batter, and other things that a human being would never do. Most likely, if a human tried to read the recipe they wouldn’t even be able to understand it.&lt;/p&gt;

&lt;p&gt;I remember a case study where some scientists made a neural network to solve a relatively predictable problem; either solving an equation or navigating a maze, I don’t remember. After running the neural network for long enough, they found two things: 1) that the process followed was borderline gibberish and was extremely difficult to understand, and 2) that the algorithm was now so sophisticated that is was actually &lt;em&gt;taking advantage of previously undiscovered flaws in the hardware&lt;/em&gt; to optimize its speed.&lt;/p&gt;

&lt;p&gt;So as an algorithm becomes increasingly complex, it eventually goes beyond human comprehension, in unpredictable ways. This gives way to an important, and perhaps unanswerable question: &lt;strong&gt;&lt;em&gt;At what point of complexity, if any, are we forced to consider the possibility that an electronic device may be conscious?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add to this the fact that, using the internet, massive numbers of these robots or computers could be added together in a neural network. Imagine the skill of an individual who spent their entire life studying a trade. A neural network could have the equivalent of tens, or hundreds, or thousands of lifetimes of experience in a trade.&lt;/p&gt;

&lt;p&gt;It’s pretty much unanimous that the answer is “we’re not sure, but we’re pretty sure we’re not there yet”. Perhaps by following certain guidelines, we can find a way to ensure we never reach that point. It will give way to entirely new discussions about ethics and technology, the likes of which we’ve never seen. Further, it could introduce the problem of how human beings will function in a post-scarcity society, or a society where some are post-scarcity society, or even if a post-scarcity society is possible when labor becomes infinite.&lt;/p&gt;

&lt;h1 id=&quot;legal-status-of-advanced-robotics&quot;&gt;Legal Status of Advanced Robotics&lt;/h1&gt;
&lt;p&gt;As time goes on, it’s becoming apparent that we will need separate legal status for sufficiently dangerous equipment. The article above suggested tracking the possession of these robots using a kind of registry; this is an interesting idea. What if, like land, sufficiently advanced robots transferred ownership by way of a legal title or deed? It would allow one to track and identify the owner, in the case of one going rogue.&lt;/p&gt;

&lt;p&gt;But further, who gets held accountable when things go wrong? Say you had some highly-intelligent industrial equipment in a machine shop programmed using a neural net, that injured a worker?  Most would agree that the worker needs to be compensated, but should the legal owner of the robot or the machine be held accountable? It’s even possible that the neural net is part of a “hive mind” neural net, where all devices operate according to the same rules. This “hive mind” could be fully-distributed, where it has no owner, like the internet. Perhaps the manufacturer of the robot never even touched its programming.&lt;/p&gt;

&lt;p&gt;But in a system where a robot becomes as complex, or even more complex than a human being, could we hold that robot responsible? Further, if the robot is part of a hive mind, how can you hold anyone responsible? The hive mind is, at this point, beyond the control or understanding of any human being, but it’s also not sentient and is incapable of malicious intent. In this scenario, there are strong arguments that no one could be fairly held accountable, since the only point of failure was not controlled by any sentient being.&lt;/p&gt;

&lt;p&gt;At this point, consideration of giving the status of a legal entity to the “hive mind” is necessary, because it must be held accountable for its actions, because no one else can. Then, it needs money, in order to compensate users when things go wrong. But this raises entirely new questions - how does it decide when to go to court and when to settle? Who argues for it in court - does it hire a “lawyer” hive mind? Does it have to pay the other “hive mind?” Does a human lawyer handle it? How could a human judge assess a being that they not only can’t understand, but can’t empathize with? What happens when a “hive mind” wrongs another “hive mind”? Where will the “hive mind” get its money from? Who does it charge? Would all this be decided by its original creator? Would it owe its original creator royalties? Can its original creator “disown” it (similarly to what happens with some “open-source” development projects?&lt;/p&gt;

&lt;h1 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h1&gt;
&lt;p&gt;This is a lot to think about, and ultimately we won’t have any concrete answers until we get there. However, I’ve got a few ideas and principles that I believe could make things easier going forward.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intentional creation of sentient beings should, at least at the beginning, be illegal.&lt;/li&gt;
  &lt;li&gt;We need a definition of sentient for this context.&lt;/li&gt;
  &lt;li&gt;Ultimately, I believe that the creation of special legal status (similar to corporations) for sufficiently intelligent artificial entities is necessary.&lt;/li&gt;
  &lt;li&gt;How is a legal artificial entity different from a human, or a corporation? Can it declare bankruptcy? What legal rights and responsibilities does it have?&lt;/li&gt;
  &lt;li&gt;At exactly what point does a neural network become sufficiently detached from human control that an individual human can’t be held accountable?&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 20 Jan 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2017/01/20/Ethical-Considerations-In-Advanced-Robotics-and-AI.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/20/Ethical-Considerations-In-Advanced-Robotics-and-AI.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Secure Your Online Life</title>
        <description>&lt;p&gt;Have an online stalker who you’re worried might hack your account? Have sensitive materials in your accounts or computer
that you don’t want to be exposed to a threat? Just want to be safe in the modern day internet environment? Here you’ll
find some simple guidelines to stay safe out there.&lt;/p&gt;

&lt;p&gt;As time goes on, personal information security has gotten more and more important, and knowing what exactly to do and
how to do it is difficult. For that reason, I’m making a short post about how to lock down your online life.&lt;/p&gt;

&lt;h1 id=&quot;important-terms&quot;&gt;Important Terms&lt;/h1&gt;
&lt;p&gt;When talking about online security, there are some precise terms because of how new this field is. So I’ll cover some of
these here.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Encryption - Encryption is a process that scrambles data using a passcode. When data is properly encrypted with a secure password, it is unreadable by anyone.&lt;/li&gt;
  &lt;li&gt;AES - The standard for “symmetric” encryption. This is what the NSA uses for top secret files, which should indicate its reliability.&lt;/li&gt;
  &lt;li&gt;Multi-Factor Authentication - The process of using multiple ways to verify that someone is who they say they are. For example,  a password (something only you should know), and a code texted to your phone (something only you should have). By verifying someone’s identity in multiple ways, you increase the barrier to entry of breaking into your phone.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;step-1-password-manager&quot;&gt;Step 1. Password Manager&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/files/images/posts/2017-01-17-LastPass.png&quot; alt=&quot;LastPass in action&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Passwords in general have two main vulnerabilities:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;They’re usually made up of words, maybe with a number tacked on to the end. This becomes predictable, and makes easier to guess.&lt;/li&gt;
  &lt;li&gt;People often reuse the same password on multiple websites, so if an attacker gets one password, they get them all.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The best answer to these problems is a Password Manager. I recommend &lt;a href=&quot;https://lastpass.com&quot;&gt;LastPass&lt;/a&gt;, because it’s truly cross-platform and affordable. &lt;a href=&quot;https://1password.com&quot;&gt;1Password&lt;/a&gt; is also popular. iCloud Keychain is built in to macs, and has some nice features as well, but is &lt;strong&gt;only&lt;/strong&gt; on MacOS and iOS. Here’s what they do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remember all of your passwords, securely encrypted in a “vault” with AES encryption.&lt;/li&gt;
  &lt;li&gt;Lock that vault with one password - which means you only have to remember that one.&lt;/li&gt;
  &lt;li&gt;Plug in to web browsers and other apps and fill in your passwords automatically or with a prompt.&lt;/li&gt;
  &lt;li&gt;Generate new, secure passwords that have a mix of letters, numbers, and symbols, and can be relatively long. Here’s an example: &amp;amp;B3BPBSNMKfus%9e*gy4. Good luck guessing that, hackers!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result is that, as long as you guard your master password jealously, avoid reusing it where possible and use the generated passwords, your web life will be very secure.&lt;/p&gt;

&lt;p&gt;However, password managers have one important downfall: if your master password gets out, you can lose everything. Which is why you may also want to use:&lt;/p&gt;

&lt;h1 id=&quot;step-2-two-factor-authentication&quot;&gt;Step 2. Two-Factor Authentication&lt;/h1&gt;
&lt;div class=&quot;col-md-12&quot;&gt;
&lt;img src=&quot;/files/images/posts/2017-01-17-Authy.PNG&quot; class=&quot;col-md-6&quot; /&gt;

2-factor authentication can send a unique code to a device you own, to prove that you are who you say you are, when you first log in to a service from a new device or haven't logged in for a long time.

Typically, this is a service you have to turn on in the web service you're looking at. Usually it works by sending you a text with a one-time code that you can use to log in, but there are other solutions.

I recommend [Authy](https://www.authy.com) as your &quot;one-stop-shop&quot; for this, as it works with a lot of websites, won't fill up your text inbox, and works on iOS, Android, and Desktop. When setting up two-factor authentication on a website, look for &quot;Google Authenticator&quot;. It'll give you a QR code - just scan it, and it's set up! Note that some sites only support text for authentication, and not Google Authenticator.

You can use this for LastPass, and now in order for someone to get into your account, it makes it *very* difficult to break into your account.

Note: Apple and Microsoft have their own ways for doing this for their accounts, that are in some ways more convenient and in some ways less so.
&lt;/div&gt;

&lt;h1 id=&quot;step-3-full-disk-encryption&quot;&gt;Step 3. Full Disk Encryption&lt;/h1&gt;
&lt;div class=&quot;col-md-12&quot;&gt;
&lt;img src=&quot;/files/images/posts/2017-01-17-FileVault.png&quot; class=&quot;col-md-8&quot; /&gt;

This is a rather drastic step, but it has been made feasible by advances in technology. This will slow down your computer, but if you have a Solid State Drive (SSD) it isn't particularly noticeable. The previous two steps can be considered sufficient for most people. This is turned on by default in Android and iOS.

The hard drive is where all your data is kept. Under normal circumstances, if someone steals this or your computer, they can read anything on it (that isn't encrypted). Hackers have a saying: &quot;Physical access is total access&quot;. Of course, if there's nothing interesting/private on your computer (that's not encrypted already, like LastPass and Authy) this is a pointless exercise.

Windows does this with BitLocker, and MacOS does this with FileVault. Both are excellent solutions (although Apple has a better record of not programming &quot;back doors&quot; in their software - which has lost them fans among the NSA and FBI and gotten them praise from privacy advocates). If these aren't sufficient for you, you can do research and find your own solution.
&lt;/div&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Congrats! With step 1 and 2, and proper diligence, your digital life is now locked down tight. If you followed step 3 as well, you’re Fort Knox 🎉.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2017/01/17/How-to-Secure-Your-Online-Life.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/17/How-to-Secure-Your-Online-Life.html</guid>
        
        
      </item>
    
      <item>
        <title>2016 MacBook Pro Impressions</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Now that I actually have some time on my hands, I’ll talk about Apple’s MacBook Pro line refresh. This refresh has long
been asked for in Apple circles, after the line has gone stale. It seems to me that Apple has largely transitioned away
from its computer line, treating them more as accessories to iPhone devices than as standalone products. It seems to me
that the new iterations of MacBooks are largely informed by this philosophy, in that they’re coming in with lower power
requirements, a smaller footprint, and longer battery life. They’re also coming with a larger price tag, something that
definitely has not been received well.&lt;/p&gt;

&lt;p&gt;In this, I’ll discuss both the positives and negatives of the new hardware. This isn’t a fanboy’s explanation of why
these are Tim Cook’s greatest gift to mankind, nor is it a techie’s decrying of Apple’s risky decisions. I’m trying to
explore both the positive and negative aspects here.&lt;/p&gt;

&lt;p&gt;Also note: I’m going to mostly talk with reference to the 15” models with touch bar, since it doesn’t make much sense
to me to talk about the incomplete feature set.&lt;/p&gt;

&lt;h1 id=&quot;considerations-from-the-modern-computing-environment&quot;&gt;Considerations from the Modern Computing Environment&lt;/h1&gt;
&lt;p&gt;You can probably skip this section, but when talking about features, I may reference it when making judgement calls
about why something is a good or bad thing.&lt;/p&gt;

&lt;p&gt;The things that make a good consumer computer, in my opinion, have been changing rapidly. Computing power has become
ridiculously cheap, to the point where it’s often cheaper to rent computing power from Amazon or another cloud computing
service than it is to pay for the electricity bill to run your own. On the other hand, consumers are using laptops more
and more in their daily lives, making battery life and ease of use more and more important over computing power. People
use this fact daily (and Apple has done a bad job of adapting to this in some cases that I won’t cover here) without
even realizing it. Google Photos has computers that work on recognizing items in users’ photos so they can search by it.
Developers use cloud computing to run software builds and tests that can take hours on a fast machine. Graphics
professionals use cloud services to render animations, things that can take a very long time run locally. This allows
people to do complicated, powerful computations that would normally tie up their machine’s CPU for hours much faster,
without tying up their machine.&lt;/p&gt;

&lt;p&gt;In short, cloud computing, when applied correctly, is faster, cheaper, and more convenient than running it on your local
computer, and it makes your computer’s processing power irrelevant.&lt;/p&gt;

&lt;p&gt;Something else to consider is that we’re reaching the limit of the performance that can be achieved by single computers;
this is one of the factors that has been driving the migration towards cloud computing. Processing power used to roughly
double every 12 months, which turned to 18 months, which turned into 24, and now no longer really happens. We can only
manufacture transistors so small, and we can only cram so many fans and heat sinks into laptops. This means that, in
terms of specs, computers today aren’t that far ahead of computers a few years ago, which means upgrading regularly is
becoming less and less necessary. That’s not to say improvements haven’t been made, they just aren’t as dramatic as they
used to be.&lt;/p&gt;

&lt;h1 id=&quot;model-variations&quot;&gt;Model variations&lt;/h1&gt;
&lt;p&gt;Apple is continuing their strategy of an effectively 3-tier product line - the feature-limited 13”, the 13”, and the 15”.&lt;/p&gt;

&lt;h2 id=&quot;feature-limited-13-macbook-pro&quot;&gt;Feature-Limited 13” MacBook Pro&lt;/h2&gt;
&lt;p&gt;The feature-limited 13” model starts at a steep $1500. This is a big step up, where this model previously sold at $1000.
It has a traditional function row instead of the touch bar, which many may find preferable. It has a 2.0GHz Dual-Code i5
CPU, 8GB (config to 16GB) memory, 256GB (config to 1TB) of SSD storage, and integrated Iris Pro graphics. It has weak
processing power, but if that’s not needed, it would be an acceptable work computer.&lt;/p&gt;

&lt;h2 id=&quot;full-featured-13-macbook-pro&quot;&gt;Full-Featured 13” MacBook Pro&lt;/h2&gt;
&lt;p&gt;This model starts at $1800. It has the iconic touch bar, which is pretty much the #1 feature of the new models. It has a
reasonable 2.9GHz Dual-Core i5 CPU, 8GB (config to 16GB) memory, 256GB (config to 1TB) SSD, and integrated Iris Pro
graphics. It compares to the 15” models about as well as the previous years did; it’s noticeably weaker.&lt;/p&gt;

&lt;h2 id=&quot;15-macbook-pro&quot;&gt;15” MacBook Pro&lt;/h2&gt;
&lt;p&gt;These computers are definitely the flagship, albeit with the nasty price point of $2400. It has a 2.6GHz Quad-Core i7
CPU (config to 2.9GHz), 16GB Memory, 256GB (config to 2TB) of SSD storage, and Radeon Pro 450 (config to 460) graphics.&lt;/p&gt;

&lt;h1 id=&quot;form-factor&quot;&gt;Form Factor&lt;/h1&gt;
&lt;p&gt;I’m going to talk about form factor first, because it’s the first interaction you’ll have with the computer. It’s very
thin, clocking in at about 1.5cm, and 3lbs for the 13”, or 4lbs for the 15”. A lot of people have decryed this, saying
they’d prefer using the internal space lost to put in more processing power or battery life.&lt;/p&gt;

&lt;h1 id=&quot;the-touch-bar&quot;&gt;The Touch Bar&lt;/h1&gt;
&lt;p&gt;People have talked about this being one of the new features for a while, and I have mixed feelings about it. I’ll say
this: Using a touch screen to replace the function row is certainly an interesting idea. Tim Cook has stated that he
doesn’t believe in putting touch screens on laptops’ main displays for user experience reasons, and I agree; why is for
another time. A lot of people are decrying it as foolish. As a developer, I’m inclined that direction; a lot of the
programs I use depend on the function row, and I don’t know for sure what will happen. A lot of people are particularly
unhappy because this will replace the physical escape key. Further, if you can touch-type function row, and use it
heavily in daily operations, this will be a big hit to your workflow.&lt;/p&gt;

&lt;p&gt;To me, this direction makes sense for Apple. Apple applications don’t often make great use of the function row, because
on macs those keys are primarily for media keys and other built-in functions, so doing something goofy with them almost
makes sense.&lt;/p&gt;

&lt;p&gt;All in all, I actually like the idea of this feature. It lets individual apps customize what the touch bar can do, so
you won’t have to look up what the buttons do anymore. For something like photoshop, you could even put different tools
in the touch bar, freeing up the screen space for what you’re working on. For other things, you don’t need to remember
what “F6” does - there will be a picture right there on your keyboard. I believe we’ll see app developers come up with
a lot of interesting uses for the touch bar, and it’ll end up being a huge asset.&lt;/p&gt;

&lt;p&gt;As far as touch-typing goes, I think it won’t be as big an issue as people usually consider it to be. While you don’t
have the tactile feedback on keypresses, you still have the rest of the keyboard as a touch-typing reference, in the
same way that you can touch-type on a phone once you’re used to holding it.&lt;/p&gt;

&lt;h1 id=&quot;the-ports&quot;&gt;The Ports&lt;/h1&gt;
&lt;p&gt;The new MacBook Pros only have five ports (three on the feature-limited 13”), four Thunderbolt 3 / USB-C and a headphone
jack. These are replacing a lot, including USB 3.0, HDMI, SD-Card, Thunderbolt 2, and charging port.&lt;/p&gt;

&lt;p&gt;This means, if you plug anything into your computer other than headphones, you will need some sort of adapter or dock.
However, each individual port can be used for 40 Gbps file transfer. That’s a lot. That’s enough to use two 4K displays
running at 60FPS at the same time off of one port, with bandwidth to spare.&lt;/p&gt;

&lt;p&gt;Of course, the loss of moving towards the 1 port solution (USB-C is likely the future of everything, including data
transfer, displays, headphones, and more) is that for now, older technologies like HDMI and USB 2/3 need adapters to
work out of the box. It’s a growing pain of moving forward. That said, I think it was too soon to convert completely
to USB-C, and Apple should have waited another year or two to make that push. For example, for me, I depend too heavily
on HDMI, SD Cards, and Thunderbolt 1/2 to be able to switch to USB-C right now.&lt;/p&gt;

&lt;h1 id=&quot;the-specs&quot;&gt;The Specs&lt;/h1&gt;
&lt;p&gt;I’m actually quite happy with the specs on the higher-end models. 2.6-2.9GHz i7 is reasonable for middle-high-end laptops,
which is exactly what the 15” MBPs are supposed to be. They also have 16GB Memory standard, which I think is
commensurate with that description. The lower models sporting 8GB also makes sense to me, because I think 8GB is
probably sufficient for most people. Of course, YMMV depending on what you’re doing. The lower-end models not having
upgradeable graphics is somewhat concerning, but not at all surprising. Graphics is one of the areas that can make a
huge difference in user experience, and so I find it disappointing. On the other hand, it seems more and more like the
13” pro line is less of a “pro” line and more Apple’s middle-end laptop line. On the other hand, the 15” models feature
discrete graphics cards across the board, which is another welcome change from the high-end users.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;The MacBook Pro line was in dire need of a refresh, and despite what the critics say, I don’t think Apple did a terrible
job here. They put decent specs on the higher-end computers to satisfy the high-end users, and added a big innovation in
user experience. Once people start using the touch bar, and application support of it matures, I suspect people will
find that it’s actually a useful tool and helpful to the workflow. Apple is always pushing the envelope on ports, so I
doubt the transition to thunderbolt 3 will be a particularly big deal. I suspect that, if anything, the price points
will be what hurts sales.&lt;/p&gt;

&lt;p&gt;A lot of people have voiced that they dislike the new laptops. Perhaps the funniest thing I saw was that it was
“highway robbery”. This comes down to something simple: if you don’t like it, don’t buy it. Believe me, if nobody buys
these, Apple will change their business strategies. You can still buy the old models refurbished (Apple has a great
refurb program - my current computer is a refurb) &lt;a href=&quot;http://www.apple.com/shop/browse/home/specialdeals/mac&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;will-you-buy-it&quot;&gt;Will You Buy It?&lt;/h1&gt;
&lt;p&gt;A lot of people have asked me this. My answer is of course not. I’m a university student with a 15” 2012 MacBook Pro,
which has held up great over the years. It has all the power I need, and while there are a few improvements that I
definitely like about the new models (touch bar, fast ports), my current laptop is more than powerful enough to suit
my needs, and doesn’t require any modifications to work with my current setup. Likewise, if your current computer suits
your needs, don’t fix what ain’t broke. On the other hand, if you need a new computer and are willing to shell out the
big bucks, I think the new MacBook Pro is a fine choice.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Nov 2016 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2016/11/12/2016-Macbook-Pro-Impressions.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/12/2016-Macbook-Pro-Impressions.html</guid>
        
        
      </item>
    
      <item>
        <title>How to use Avahi to advertise an HTTP service</title>
        <description>&lt;p&gt;This is a simple guide to how to set up avahi to advertise an HTTP service that a web browser (in this case, Safari’s Bonjour) can detect and hook into.&lt;/p&gt;

&lt;p&gt;Background: This is running on a server running FreeBSD 10.3.0. Avahi was installed using pkg and set up with the default configuration.
It is used largely as a sandbox for experimenting, as well as being a media/file server and a light webserver.
Its capacity as a media server is fulfilled using &lt;a href=&quot;https://www.plex.tv&quot;&gt;Plex&lt;/a&gt;, so I want to advertise the existence of the Plex server for easy use.&lt;/p&gt;

&lt;p&gt;First, install avahi with the package manager of your choice. In the case of FreeBSD and pkg, &lt;code class=&quot;highlighter-rouge&quot;&gt;pkg install avahi -y&lt;/code&gt;.
If using FreeBSD, you’ll need to enable the service by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;avahi_daemon_enable=&quot;YES&quot;&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/rc.conf&lt;/code&gt;.
In GNU/Linux distros, this is typically not required.
The avahi service can now be started/stopped/restarted with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo service avahi-daemon &amp;lt;start/stop/restart&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, find the avahi services directory. With my installation, it is located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/avahi/services&lt;/code&gt;.
On other GNU/Linux distros, it may also be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/avahi/services&lt;/code&gt;.
In the services directory, you will likely see some default services aleady set up.
For example, I already had &lt;code class=&quot;highlighter-rouge&quot;&gt;sftp-ssh.service&lt;/code&gt; amd &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh.service&lt;/code&gt; in mine.&lt;/p&gt;

&lt;p&gt;Create a new file called &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;your-service&amp;gt;.service&lt;/code&gt;. In my case, this is &lt;code class=&quot;highlighter-rouge&quot;&gt;plex.service&lt;/code&gt;.
Within that file, add the following (which I shamelessly stole most of from &lt;a href=&quot;http://holyarmy.org/2008/01/advertising-linux-services-via-avahibonjour/&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; standalone='no'?&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--*-nxml-*--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE service-group SYSTEM &quot;avahi-service.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;service-group&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;name&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;replace-wildcards=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;%h &lt;span class=&quot;nt&quot;&gt;&amp;lt;YOUR_HTTP_SERVICE&amp;gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;service&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;_http._tcp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;port&amp;gt;&amp;lt;YOUR_PORT&amp;gt;&amp;lt;/port&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/service-group&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, restart avahi with the command &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo service avahi-daemon restart&lt;/code&gt;.
The new service will now be viewable via bonjour clients, such as Safari and dns-sd (see below).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/images/posts/2016-09-26-avahi-in-safari.png&quot; alt=&quot;Avahi-Safari&quot; /&gt;
&lt;img src=&quot;/files/images/posts/2016-09-26-avahi-in-terminal.png&quot; alt=&quot;Avahi-dns-sd&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Sep 2016 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2016/09/26/Avahi-HTTP-Service.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/09/26/Avahi-HTTP-Service.html</guid>
        
        
      </item>
    
  </channel>
</rss>
